# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 1.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from tornclient.models.faction_applications_response import FactionApplicationsResponse
from tornclient.models.faction_attacks_full_response import FactionAttacksFullResponse
from tornclient.models.faction_attacks_response import FactionAttacksResponse
from tornclient.models.faction_balance_response import FactionBalanceResponse
from tornclient.models.faction_basic_response import FactionBasicResponse
from tornclient.models.faction_chain_report_response import FactionChainReportResponse
from tornclient.models.faction_chains_response import FactionChainsResponse
from tornclient.models.faction_contributors_response import FactionContributorsResponse
from tornclient.models.faction_crime_response import FactionCrimeResponse
from tornclient.models.faction_crimes_response import FactionCrimesResponse
from tornclient.models.faction_get200_response import FactionGet200Response
from tornclient.models.faction_hof_response import FactionHofResponse
from tornclient.models.faction_lookup_response import FactionLookupResponse
from tornclient.models.faction_members_response import FactionMembersResponse
from tornclient.models.faction_news_category import FactionNewsCategory
from tornclient.models.faction_news_response import FactionNewsResponse
from tornclient.models.faction_ongoing_chain_response import FactionOngoingChainResponse
from tornclient.models.faction_positions_response import FactionPositionsResponse
from tornclient.models.faction_rackets_reponse import FactionRacketsReponse
from tornclient.models.faction_ranked_war_report_response import FactionRankedWarReportResponse
from tornclient.models.faction_ranked_war_response import FactionRankedWarResponse
from tornclient.models.faction_ranked_wars_category_enum import FactionRankedWarsCategoryEnum
from tornclient.models.faction_selection_name import FactionSelectionName
from tornclient.models.faction_stat_enum import FactionStatEnum
from tornclient.models.faction_stats_response import FactionStatsResponse
from tornclient.models.faction_territories_ownership_response import FactionTerritoriesOwnershipResponse
from tornclient.models.faction_territories_reponse import FactionTerritoriesReponse
from tornclient.models.faction_territory_war_report_response import FactionTerritoryWarReportResponse
from tornclient.models.faction_territory_wars_category_enum import FactionTerritoryWarsCategoryEnum
from tornclient.models.faction_territory_wars_history_response import FactionTerritoryWarsHistoryResponse
from tornclient.models.faction_territory_wars_response import FactionTerritoryWarsResponse
from tornclient.models.faction_upgrades_response import FactionUpgradesResponse
from tornclient.models.faction_wars_response import FactionWarsResponse
from tornclient.models.revives_full_response import RevivesFullResponse
from tornclient.models.revives_response import RevivesResponse
from tornclient.models.timestamp_response import TimestampResponse

from tornclient.api_client import ApiClient, RequestSerialized
from tornclient.api_response import ApiResponse
from tornclient.rest import RESTResponseType


class FactionApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def faction_applications_get(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionApplicationsResponse:
        """Get your faction's applications

        Requires minimal access key with faction API access permissions. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_applications_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionApplicationsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_applications_get_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionApplicationsResponse]:
        """Get your faction's applications

        Requires minimal access key with faction API access permissions. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_applications_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionApplicationsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_applications_get_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's applications

        Requires minimal access key with faction API access permissions. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_applications_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionApplicationsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_applications_get_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/applications',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_attacks_get(
        self,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionAttacksResponse:
        """Get your faction's detailed attacks

        Requires limited access key with faction API access permissions. <br>

        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_attacks_get_serialize(
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionAttacksResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_attacks_get_with_http_info(
        self,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionAttacksResponse]:
        """Get your faction's detailed attacks

        Requires limited access key with faction API access permissions. <br>

        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_attacks_get_serialize(
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionAttacksResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_attacks_get_without_preload_content(
        self,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's detailed attacks

        Requires limited access key with faction API access permissions. <br>

        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_attacks_get_serialize(
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionAttacksResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_attacks_get_serialize(
        self,
        limit,
        sort,
        to,
        var_from,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/attacks',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_attacksfull_get(
        self,
        limit: Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionAttacksFullResponse:
        """Get your faction's simplified attacks

        Requires limited access key with faction API access permissions. <br>

        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_attacksfull_get_serialize(
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionAttacksFullResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_attacksfull_get_with_http_info(
        self,
        limit: Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionAttacksFullResponse]:
        """Get your faction's simplified attacks

        Requires limited access key with faction API access permissions. <br>

        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_attacksfull_get_serialize(
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionAttacksFullResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_attacksfull_get_without_preload_content(
        self,
        limit: Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's simplified attacks

        Requires limited access key with faction API access permissions. <br>

        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_attacksfull_get_serialize(
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionAttacksFullResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_attacksfull_get_serialize(
        self,
        limit,
        sort,
        to,
        var_from,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/attacksfull',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_balance_get(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionBalanceResponse:
        """Get your faction's & member's balance details

        Requires limited access key with faction API access permissions. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_balance_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionBalanceResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_balance_get_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionBalanceResponse]:
        """Get your faction's & member's balance details

        Requires limited access key with faction API access permissions. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_balance_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionBalanceResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_balance_get_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's & member's balance details

        Requires limited access key with faction API access permissions. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_balance_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionBalanceResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_balance_get_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/balance',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_basic_get(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionBasicResponse:
        """Get your faction's basic details

        Requires public access key. <br> The 'is_enlisted' value will be populated if you have API faction permissions (with custom, limited or full access keys), otherwise it will be set as null.

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_basic_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionBasicResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_basic_get_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionBasicResponse]:
        """Get your faction's basic details

        Requires public access key. <br> The 'is_enlisted' value will be populated if you have API faction permissions (with custom, limited or full access keys), otherwise it will be set as null.

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_basic_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionBasicResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_basic_get_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's basic details

        Requires public access key. <br> The 'is_enlisted' value will be populated if you have API faction permissions (with custom, limited or full access keys), otherwise it will be set as null.

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_basic_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionBasicResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_basic_get_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/basic',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_chain_get(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionOngoingChainResponse:
        """Get your faction's current chain

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_chain_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionOngoingChainResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_chain_get_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionOngoingChainResponse]:
        """Get your faction's current chain

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_chain_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionOngoingChainResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_chain_get_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's current chain

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_chain_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionOngoingChainResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_chain_get_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/chain',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_chain_id_chainreport_get(
        self,
        chain_id: Annotated[StrictInt, Field(description="Chain id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionChainReportResponse:
        """Get a chain report

        Requires public access key. <br> Chain reports for ongoing chains are available only for your own faction.

        :param chain_id: Chain id (required)
        :type chain_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_chain_id_chainreport_get_serialize(
            chain_id=chain_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionChainReportResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_chain_id_chainreport_get_with_http_info(
        self,
        chain_id: Annotated[StrictInt, Field(description="Chain id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionChainReportResponse]:
        """Get a chain report

        Requires public access key. <br> Chain reports for ongoing chains are available only for your own faction.

        :param chain_id: Chain id (required)
        :type chain_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_chain_id_chainreport_get_serialize(
            chain_id=chain_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionChainReportResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_chain_id_chainreport_get_without_preload_content(
        self,
        chain_id: Annotated[StrictInt, Field(description="Chain id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a chain report

        Requires public access key. <br> Chain reports for ongoing chains are available only for your own faction.

        :param chain_id: Chain id (required)
        :type chain_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_chain_id_chainreport_get_serialize(
            chain_id=chain_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionChainReportResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_chain_id_chainreport_get_serialize(
        self,
        chain_id,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if chain_id is not None:
            _path_params['chainId'] = chain_id
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/{chainId}/chainreport',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_chainreport_get(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionChainReportResponse:
        """Get your faction's latest chain report

        Requires public access key. <br> This includes currently ongoing chains.

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_chainreport_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionChainReportResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_chainreport_get_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionChainReportResponse]:
        """Get your faction's latest chain report

        Requires public access key. <br> This includes currently ongoing chains.

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_chainreport_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionChainReportResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_chainreport_get_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's latest chain report

        Requires public access key. <br> This includes currently ongoing chains.

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_chainreport_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionChainReportResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_chainreport_get_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/chainreport',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_chains_get(
        self,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionChainsResponse:
        """Get a list of your faction's completed chains

        Requires public access key. <br>

        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_chains_get_serialize(
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionChainsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_chains_get_with_http_info(
        self,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionChainsResponse]:
        """Get a list of your faction's completed chains

        Requires public access key. <br>

        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_chains_get_serialize(
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionChainsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_chains_get_without_preload_content(
        self,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of your faction's completed chains

        Requires public access key. <br>

        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_chains_get_serialize(
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionChainsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_chains_get_serialize(
        self,
        limit,
        sort,
        to,
        var_from,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/chains',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_contributors_get(
        self,
        stat: Annotated[FactionStatEnum, Field(description="Get contributors for this field.")],
        cat: Annotated[Optional[StrictStr], Field(description="By default, this selection will return only current faction's member contributions, and the option 'all' will return all contributors.")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionContributorsResponse:
        """Get your faction's challenge contributors

        Requires limiteed access key with faction API access permissions. <br>

        :param stat: Get contributors for this field. (required)
        :type stat: FactionStatEnum
        :param cat: By default, this selection will return only current faction's member contributions, and the option 'all' will return all contributors.
        :type cat: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_contributors_get_serialize(
            stat=stat,
            cat=cat,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionContributorsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_contributors_get_with_http_info(
        self,
        stat: Annotated[FactionStatEnum, Field(description="Get contributors for this field.")],
        cat: Annotated[Optional[StrictStr], Field(description="By default, this selection will return only current faction's member contributions, and the option 'all' will return all contributors.")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionContributorsResponse]:
        """Get your faction's challenge contributors

        Requires limiteed access key with faction API access permissions. <br>

        :param stat: Get contributors for this field. (required)
        :type stat: FactionStatEnum
        :param cat: By default, this selection will return only current faction's member contributions, and the option 'all' will return all contributors.
        :type cat: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_contributors_get_serialize(
            stat=stat,
            cat=cat,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionContributorsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_contributors_get_without_preload_content(
        self,
        stat: Annotated[FactionStatEnum, Field(description="Get contributors for this field.")],
        cat: Annotated[Optional[StrictStr], Field(description="By default, this selection will return only current faction's member contributions, and the option 'all' will return all contributors.")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's challenge contributors

        Requires limiteed access key with faction API access permissions. <br>

        :param stat: Get contributors for this field. (required)
        :type stat: FactionStatEnum
        :param cat: By default, this selection will return only current faction's member contributions, and the option 'all' will return all contributors.
        :type cat: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_contributors_get_serialize(
            stat=stat,
            cat=cat,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionContributorsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_contributors_get_serialize(
        self,
        stat,
        cat,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if stat is not None:
            
            _query_params.append(('stat', stat.value))
            
        if cat is not None:
            
            _query_params.append(('cat', cat))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/contributors',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_crime_id_crime_get(
        self,
        crime_id: Annotated[StrictInt, Field(description="Crime id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionCrimeResponse:
        """Get a specific organized crime

        Requires minimal access key with faction API access permissions. <br>

        :param crime_id: Crime id (required)
        :type crime_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_crime_id_crime_get_serialize(
            crime_id=crime_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionCrimeResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_crime_id_crime_get_with_http_info(
        self,
        crime_id: Annotated[StrictInt, Field(description="Crime id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionCrimeResponse]:
        """Get a specific organized crime

        Requires minimal access key with faction API access permissions. <br>

        :param crime_id: Crime id (required)
        :type crime_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_crime_id_crime_get_serialize(
            crime_id=crime_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionCrimeResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_crime_id_crime_get_without_preload_content(
        self,
        crime_id: Annotated[StrictInt, Field(description="Crime id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a specific organized crime

        Requires minimal access key with faction API access permissions. <br>

        :param crime_id: Crime id (required)
        :type crime_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_crime_id_crime_get_serialize(
            crime_id=crime_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionCrimeResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_crime_id_crime_get_serialize(
        self,
        crime_id,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if crime_id is not None:
            _path_params['crimeId'] = crime_id
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/{crimeId}/crime',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_crimes_get(
        self,
        cat: Annotated[Optional[StrictStr], Field(description="Category of organized crimes returned. Category 'available' includes both 'recruiting' & 'planning', and category 'completed' includes both 'successful' & 'failure'<br>Default category is 'all'")] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionCrimesResponse:
        """Get your faction's organized crimes

        Requires minimal access key with faction API access permissions. <br> It's possible to get older entries either by timestamp range (from, to) or with offset.

        :param cat: Category of organized crimes returned. Category 'available' includes both 'recruiting' & 'planning', and category 'completed' includes both 'successful' & 'failure'<br>Default category is 'all'
        :type cat: str
        :param offset:
        :type offset: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_crimes_get_serialize(
            cat=cat,
            offset=offset,
            var_from=var_from,
            to=to,
            sort=sort,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionCrimesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_crimes_get_with_http_info(
        self,
        cat: Annotated[Optional[StrictStr], Field(description="Category of organized crimes returned. Category 'available' includes both 'recruiting' & 'planning', and category 'completed' includes both 'successful' & 'failure'<br>Default category is 'all'")] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionCrimesResponse]:
        """Get your faction's organized crimes

        Requires minimal access key with faction API access permissions. <br> It's possible to get older entries either by timestamp range (from, to) or with offset.

        :param cat: Category of organized crimes returned. Category 'available' includes both 'recruiting' & 'planning', and category 'completed' includes both 'successful' & 'failure'<br>Default category is 'all'
        :type cat: str
        :param offset:
        :type offset: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_crimes_get_serialize(
            cat=cat,
            offset=offset,
            var_from=var_from,
            to=to,
            sort=sort,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionCrimesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_crimes_get_without_preload_content(
        self,
        cat: Annotated[Optional[StrictStr], Field(description="Category of organized crimes returned. Category 'available' includes both 'recruiting' & 'planning', and category 'completed' includes both 'successful' & 'failure'<br>Default category is 'all'")] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's organized crimes

        Requires minimal access key with faction API access permissions. <br> It's possible to get older entries either by timestamp range (from, to) or with offset.

        :param cat: Category of organized crimes returned. Category 'available' includes both 'recruiting' & 'planning', and category 'completed' includes both 'successful' & 'failure'<br>Default category is 'all'
        :type cat: str
        :param offset:
        :type offset: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_crimes_get_serialize(
            cat=cat,
            offset=offset,
            var_from=var_from,
            to=to,
            sort=sort,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionCrimesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_crimes_get_serialize(
        self,
        cat,
        offset,
        var_from,
        to,
        sort,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if cat is not None:
            
            _query_params.append(('cat', cat))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/crimes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_get(
        self,
        selections: Annotated[Optional[List[FactionSelectionName]], Field(description="Selection names")] = None,
        id: Annotated[Optional[StrictStr], Field(description="selection id")] = None,
        limit: Optional[Annotated[int, Field(strict=True, ge=1)]] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        cat: Annotated[Optional[StrictStr], Field(description="Selection category")] = None,
        stat: Annotated[Optional[StrictStr], Field(description="Stat category")] = None,
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionGet200Response:
        """Get any Faction selection

        Key access level depends on the required selections. <br> Choose one or more selections (comma separated).

        :param selections: Selection names
        :type selections: List[FactionSelectionName]
        :param id: selection id
        :type id: str
        :param limit:
        :type limit: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param cat: Selection category
        :type cat: str
        :param stat: Stat category
        :type stat: str
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param offset:
        :type offset: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_get_serialize(
            selections=selections,
            id=id,
            limit=limit,
            var_from=var_from,
            to=to,
            cat=cat,
            stat=stat,
            striptags=striptags,
            sort=sort,
            offset=offset,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_get_with_http_info(
        self,
        selections: Annotated[Optional[List[FactionSelectionName]], Field(description="Selection names")] = None,
        id: Annotated[Optional[StrictStr], Field(description="selection id")] = None,
        limit: Optional[Annotated[int, Field(strict=True, ge=1)]] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        cat: Annotated[Optional[StrictStr], Field(description="Selection category")] = None,
        stat: Annotated[Optional[StrictStr], Field(description="Stat category")] = None,
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionGet200Response]:
        """Get any Faction selection

        Key access level depends on the required selections. <br> Choose one or more selections (comma separated).

        :param selections: Selection names
        :type selections: List[FactionSelectionName]
        :param id: selection id
        :type id: str
        :param limit:
        :type limit: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param cat: Selection category
        :type cat: str
        :param stat: Stat category
        :type stat: str
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param offset:
        :type offset: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_get_serialize(
            selections=selections,
            id=id,
            limit=limit,
            var_from=var_from,
            to=to,
            cat=cat,
            stat=stat,
            striptags=striptags,
            sort=sort,
            offset=offset,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_get_without_preload_content(
        self,
        selections: Annotated[Optional[List[FactionSelectionName]], Field(description="Selection names")] = None,
        id: Annotated[Optional[StrictStr], Field(description="selection id")] = None,
        limit: Optional[Annotated[int, Field(strict=True, ge=1)]] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        cat: Annotated[Optional[StrictStr], Field(description="Selection category")] = None,
        stat: Annotated[Optional[StrictStr], Field(description="Stat category")] = None,
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get any Faction selection

        Key access level depends on the required selections. <br> Choose one or more selections (comma separated).

        :param selections: Selection names
        :type selections: List[FactionSelectionName]
        :param id: selection id
        :type id: str
        :param limit:
        :type limit: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param cat: Selection category
        :type cat: str
        :param stat: Stat category
        :type stat: str
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param offset:
        :type offset: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_get_serialize(
            selections=selections,
            id=id,
            limit=limit,
            var_from=var_from,
            to=to,
            cat=cat,
            stat=stat,
            striptags=striptags,
            sort=sort,
            offset=offset,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_get_serialize(
        self,
        selections,
        id,
        limit,
        var_from,
        to,
        cat,
        stat,
        striptags,
        sort,
        offset,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'selections': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if selections is not None:
            
            _query_params.append(('selections', selections))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if cat is not None:
            
            _query_params.append(('cat', cat))
            
        if stat is not None:
            
            _query_params.append(('stat', stat))
            
        if striptags is not None:
            
            _query_params.append(('striptags', striptags))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_hof_get(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionHofResponse:
        """Get your faction's hall of fame rankings.

        Requires public access key. <br> 

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_hof_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionHofResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_hof_get_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionHofResponse]:
        """Get your faction's hall of fame rankings.

        Requires public access key. <br> 

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_hof_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionHofResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_hof_get_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's hall of fame rankings.

        Requires public access key. <br> 

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_hof_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionHofResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_hof_get_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/hof',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_id_basic_get(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionBasicResponse:
        """Get a faction's basic details

        Requires public access key. <br> The 'is_enlisted' value will be populated if you're requesting data for your faction and have faction permissions (with custom, limited or full access keys), otherwise it will be set as null.

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_id_basic_get_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionBasicResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_id_basic_get_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionBasicResponse]:
        """Get a faction's basic details

        Requires public access key. <br> The 'is_enlisted' value will be populated if you're requesting data for your faction and have faction permissions (with custom, limited or full access keys), otherwise it will be set as null.

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_id_basic_get_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionBasicResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_id_basic_get_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a faction's basic details

        Requires public access key. <br> The 'is_enlisted' value will be populated if you're requesting data for your faction and have faction permissions (with custom, limited or full access keys), otherwise it will be set as null.

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_id_basic_get_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionBasicResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_id_basic_get_serialize(
        self,
        id,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/{id}/basic',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_id_chain_get(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionOngoingChainResponse:
        """Get a faction's current chain

        Requires public access key. <br>

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_id_chain_get_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionOngoingChainResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_id_chain_get_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionOngoingChainResponse]:
        """Get a faction's current chain

        Requires public access key. <br>

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_id_chain_get_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionOngoingChainResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_id_chain_get_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a faction's current chain

        Requires public access key. <br>

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_id_chain_get_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionOngoingChainResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_id_chain_get_serialize(
        self,
        id,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/{id}/chain',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_id_chains_get(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionChainsResponse:
        """Get a list of a faction's completed chains

        Requires public access key. <br>

        :param id: Faction id (required)
        :type id: int
        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_id_chains_get_serialize(
            id=id,
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionChainsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_id_chains_get_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionChainsResponse]:
        """Get a list of a faction's completed chains

        Requires public access key. <br>

        :param id: Faction id (required)
        :type id: int
        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_id_chains_get_serialize(
            id=id,
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionChainsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_id_chains_get_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of a faction's completed chains

        Requires public access key. <br>

        :param id: Faction id (required)
        :type id: int
        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_id_chains_get_serialize(
            id=id,
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionChainsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_id_chains_get_serialize(
        self,
        id,
        limit,
        sort,
        to,
        var_from,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/{id}/chains',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_id_hof_get(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionHofResponse:
        """Get a faction's hall of fame rankings.

        Requires public access key. <br> 

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_id_hof_get_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionHofResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_id_hof_get_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionHofResponse]:
        """Get a faction's hall of fame rankings.

        Requires public access key. <br> 

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_id_hof_get_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionHofResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_id_hof_get_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a faction's hall of fame rankings.

        Requires public access key. <br> 

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_id_hof_get_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionHofResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_id_hof_get_serialize(
        self,
        id,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/{id}/hof',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_id_members_get(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionMembersResponse:
        """Get a list of a faction's members

        Requires public access key. <br> The 'revive_setting' value will be populated (not Unknown) if you're requesting data for your own faction and have faction permissions (with custom, limited or full access keys), otherwise it will be set as 'Unknown'.

        :param id: Faction id (required)
        :type id: int
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_id_members_get_serialize(
            id=id,
            striptags=striptags,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionMembersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_id_members_get_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionMembersResponse]:
        """Get a list of a faction's members

        Requires public access key. <br> The 'revive_setting' value will be populated (not Unknown) if you're requesting data for your own faction and have faction permissions (with custom, limited or full access keys), otherwise it will be set as 'Unknown'.

        :param id: Faction id (required)
        :type id: int
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_id_members_get_serialize(
            id=id,
            striptags=striptags,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionMembersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_id_members_get_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of a faction's members

        Requires public access key. <br> The 'revive_setting' value will be populated (not Unknown) if you're requesting data for your own faction and have faction permissions (with custom, limited or full access keys), otherwise it will be set as 'Unknown'.

        :param id: Faction id (required)
        :type id: int
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_id_members_get_serialize(
            id=id,
            striptags=striptags,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionMembersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_id_members_get_serialize(
        self,
        id,
        striptags,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if striptags is not None:
            
            _query_params.append(('striptags', striptags))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/{id}/members',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_id_rankedwars_get(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionRankedWarResponse:
        """Get a faction's ranked wars history

        Requires public access key. <br> 

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_id_rankedwars_get_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRankedWarResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_id_rankedwars_get_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionRankedWarResponse]:
        """Get a faction's ranked wars history

        Requires public access key. <br> 

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_id_rankedwars_get_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRankedWarResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_id_rankedwars_get_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a faction's ranked wars history

        Requires public access key. <br> 

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_id_rankedwars_get_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRankedWarResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_id_rankedwars_get_serialize(
        self,
        id,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/{id}/rankedwars',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_id_territory_get(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionTerritoriesReponse:
        """Get a list of a faction's territories

        Requires public access key. <br>

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_id_territory_get_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoriesReponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_id_territory_get_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionTerritoriesReponse]:
        """Get a list of a faction's territories

        Requires public access key. <br>

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_id_territory_get_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoriesReponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_id_territory_get_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of a faction's territories

        Requires public access key. <br>

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_id_territory_get_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoriesReponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_id_territory_get_serialize(
        self,
        id,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/{id}/territory',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_id_territorywars_get(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionTerritoryWarsHistoryResponse:
        """Get a faction's territory wars history

        Requires public access key. <br> 

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_id_territorywars_get_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoryWarsHistoryResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_id_territorywars_get_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionTerritoryWarsHistoryResponse]:
        """Get a faction's territory wars history

        Requires public access key. <br> 

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_id_territorywars_get_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoryWarsHistoryResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_id_territorywars_get_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a faction's territory wars history

        Requires public access key. <br> 

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_id_territorywars_get_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoryWarsHistoryResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_id_territorywars_get_serialize(
        self,
        id,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/{id}/territorywars',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_id_wars_get(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionWarsResponse:
        """Get a faction's wars & pacts details

        Requires public access key. <br> 

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_id_wars_get_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionWarsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_id_wars_get_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionWarsResponse]:
        """Get a faction's wars & pacts details

        Requires public access key. <br> 

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_id_wars_get_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionWarsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_id_wars_get_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a faction's wars & pacts details

        Requires public access key. <br> 

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_id_wars_get_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionWarsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_id_wars_get_serialize(
        self,
        id,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/{id}/wars',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_lookup_get(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionLookupResponse:
        """faction_lookup_get

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_lookup_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionLookupResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_lookup_get_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionLookupResponse]:
        """faction_lookup_get

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_lookup_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionLookupResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_lookup_get_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """faction_lookup_get

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_lookup_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionLookupResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_lookup_get_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/lookup',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_members_get(
        self,
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionMembersResponse:
        """Get a list of your faction's members

        Requires public access key. <br> The 'revive_setting' value will be populated (not Unknown) if you have faction permissions (with custom, limited or full access keys), otherwise it will be set as 'Unknown'.

        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_members_get_serialize(
            striptags=striptags,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionMembersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_members_get_with_http_info(
        self,
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionMembersResponse]:
        """Get a list of your faction's members

        Requires public access key. <br> The 'revive_setting' value will be populated (not Unknown) if you have faction permissions (with custom, limited or full access keys), otherwise it will be set as 'Unknown'.

        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_members_get_serialize(
            striptags=striptags,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionMembersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_members_get_without_preload_content(
        self,
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of your faction's members

        Requires public access key. <br> The 'revive_setting' value will be populated (not Unknown) if you have faction permissions (with custom, limited or full access keys), otherwise it will be set as 'Unknown'.

        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_members_get_serialize(
            striptags=striptags,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionMembersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_members_get_serialize(
        self,
        striptags,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if striptags is not None:
            
            _query_params.append(('striptags', striptags))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/members',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_news_get(
        self,
        cat: Annotated[FactionNewsCategory, Field(description="News category type")],
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionNewsResponse:
        """Get your faction's news details

        Requires minimal access key with faction API access permissions. <br> It is possible to pass up to 10 categories at the time (comma separated). Categories 'attack', 'depositFunds' and 'giveFunds' are only available with 'Custom', 'Limited' or 'Full' access keys.

        :param cat: News category type (required)
        :type cat: FactionNewsCategory
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_news_get_serialize(
            cat=cat,
            striptags=striptags,
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionNewsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_news_get_with_http_info(
        self,
        cat: Annotated[FactionNewsCategory, Field(description="News category type")],
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionNewsResponse]:
        """Get your faction's news details

        Requires minimal access key with faction API access permissions. <br> It is possible to pass up to 10 categories at the time (comma separated). Categories 'attack', 'depositFunds' and 'giveFunds' are only available with 'Custom', 'Limited' or 'Full' access keys.

        :param cat: News category type (required)
        :type cat: FactionNewsCategory
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_news_get_serialize(
            cat=cat,
            striptags=striptags,
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionNewsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_news_get_without_preload_content(
        self,
        cat: Annotated[FactionNewsCategory, Field(description="News category type")],
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's news details

        Requires minimal access key with faction API access permissions. <br> It is possible to pass up to 10 categories at the time (comma separated). Categories 'attack', 'depositFunds' and 'giveFunds' are only available with 'Custom', 'Limited' or 'Full' access keys.

        :param cat: News category type (required)
        :type cat: FactionNewsCategory
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_news_get_serialize(
            cat=cat,
            striptags=striptags,
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionNewsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_news_get_serialize(
        self,
        cat,
        striptags,
        limit,
        sort,
        to,
        var_from,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if striptags is not None:
            
            _query_params.append(('striptags', striptags))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if cat is not None:
            
            _query_params.append(('cat', cat.value))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/news',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_positions_get(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionPositionsResponse:
        """Get your faction's positions details

        Requires minimal access key with faction API access permissions. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_positions_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionPositionsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_positions_get_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionPositionsResponse]:
        """Get your faction's positions details

        Requires minimal access key with faction API access permissions. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_positions_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionPositionsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_positions_get_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's positions details

        Requires minimal access key with faction API access permissions. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_positions_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionPositionsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_positions_get_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/positions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_rackets_get(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionRacketsReponse:
        """Get a list of current rackets

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_rackets_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRacketsReponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_rackets_get_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionRacketsReponse]:
        """Get a list of current rackets

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_rackets_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRacketsReponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_rackets_get_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of current rackets

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_rackets_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRacketsReponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_rackets_get_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/rackets',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_ranked_war_id_rankedwarreport_get(
        self,
        ranked_war_id: Annotated[StrictInt, Field(description="Ranked war id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionRankedWarReportResponse:
        """Get ranked war details

        Requires public access key. <br> 

        :param ranked_war_id: Ranked war id (required)
        :type ranked_war_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_ranked_war_id_rankedwarreport_get_serialize(
            ranked_war_id=ranked_war_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRankedWarReportResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_ranked_war_id_rankedwarreport_get_with_http_info(
        self,
        ranked_war_id: Annotated[StrictInt, Field(description="Ranked war id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionRankedWarReportResponse]:
        """Get ranked war details

        Requires public access key. <br> 

        :param ranked_war_id: Ranked war id (required)
        :type ranked_war_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_ranked_war_id_rankedwarreport_get_serialize(
            ranked_war_id=ranked_war_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRankedWarReportResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_ranked_war_id_rankedwarreport_get_without_preload_content(
        self,
        ranked_war_id: Annotated[StrictInt, Field(description="Ranked war id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get ranked war details

        Requires public access key. <br> 

        :param ranked_war_id: Ranked war id (required)
        :type ranked_war_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_ranked_war_id_rankedwarreport_get_serialize(
            ranked_war_id=ranked_war_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRankedWarReportResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_ranked_war_id_rankedwarreport_get_serialize(
        self,
        ranked_war_id,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if ranked_war_id is not None:
            _path_params['rankedWarId'] = ranked_war_id
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/{rankedWarId}/rankedwarreport',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_rankedwars_get(
        self,
        cat: Optional[FactionRankedWarsCategoryEnum] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionRankedWarResponse:
        """Get ranked wars list

        Requires public access key. <br> When category 'all' is chosen, you can use 'from', 'to' & 'sort' query parameters.<br>When category 'ongoing' is chosen, all currently active ranked wars are returned.<br>When no category is chosen, this selection will return ranked war history of your own faction (if any).

        :param cat:
        :type cat: FactionRankedWarsCategoryEnum
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_rankedwars_get_serialize(
            cat=cat,
            var_from=var_from,
            to=to,
            sort=sort,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRankedWarResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_rankedwars_get_with_http_info(
        self,
        cat: Optional[FactionRankedWarsCategoryEnum] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionRankedWarResponse]:
        """Get ranked wars list

        Requires public access key. <br> When category 'all' is chosen, you can use 'from', 'to' & 'sort' query parameters.<br>When category 'ongoing' is chosen, all currently active ranked wars are returned.<br>When no category is chosen, this selection will return ranked war history of your own faction (if any).

        :param cat:
        :type cat: FactionRankedWarsCategoryEnum
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_rankedwars_get_serialize(
            cat=cat,
            var_from=var_from,
            to=to,
            sort=sort,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRankedWarResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_rankedwars_get_without_preload_content(
        self,
        cat: Optional[FactionRankedWarsCategoryEnum] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get ranked wars list

        Requires public access key. <br> When category 'all' is chosen, you can use 'from', 'to' & 'sort' query parameters.<br>When category 'ongoing' is chosen, all currently active ranked wars are returned.<br>When no category is chosen, this selection will return ranked war history of your own faction (if any).

        :param cat:
        :type cat: FactionRankedWarsCategoryEnum
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_rankedwars_get_serialize(
            cat=cat,
            var_from=var_from,
            to=to,
            sort=sort,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRankedWarResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_rankedwars_get_serialize(
        self,
        cat,
        var_from,
        to,
        sort,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if cat is not None:
            
            _query_params.append(('cat', cat.value))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/rankedwars',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_revives_full_get(
        self,
        limit: Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RevivesFullResponse:
        """Get your faction's simplified revives

        Requires limited access key with faction API access permissions. <br>

        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_revives_full_get_serialize(
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            striptags=striptags,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RevivesFullResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_revives_full_get_with_http_info(
        self,
        limit: Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RevivesFullResponse]:
        """Get your faction's simplified revives

        Requires limited access key with faction API access permissions. <br>

        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_revives_full_get_serialize(
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            striptags=striptags,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RevivesFullResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_revives_full_get_without_preload_content(
        self,
        limit: Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's simplified revives

        Requires limited access key with faction API access permissions. <br>

        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_revives_full_get_serialize(
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            striptags=striptags,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RevivesFullResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_revives_full_get_serialize(
        self,
        limit,
        sort,
        to,
        var_from,
        striptags,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if striptags is not None:
            
            _query_params.append(('striptags', striptags))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/revivesFull',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_revives_get(
        self,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RevivesResponse:
        """Get your faction's detailed revives

        Requires limited access key with faction API access permissions. <br>

        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_revives_get_serialize(
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            striptags=striptags,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RevivesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_revives_get_with_http_info(
        self,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RevivesResponse]:
        """Get your faction's detailed revives

        Requires limited access key with faction API access permissions. <br>

        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_revives_get_serialize(
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            striptags=striptags,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RevivesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_revives_get_without_preload_content(
        self,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's detailed revives

        Requires limited access key with faction API access permissions. <br>

        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_revives_get_serialize(
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            striptags=striptags,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RevivesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_revives_get_serialize(
        self,
        limit,
        sort,
        to,
        var_from,
        striptags,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if striptags is not None:
            
            _query_params.append(('striptags', striptags))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/revives',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_stats_get(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionStatsResponse:
        """Get your faction's challenges stats

        Requires minimal access key with faction API access permissions. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_stats_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionStatsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_stats_get_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionStatsResponse]:
        """Get your faction's challenges stats

        Requires minimal access key with faction API access permissions. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_stats_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionStatsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_stats_get_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's challenges stats

        Requires minimal access key with faction API access permissions. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_stats_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionStatsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_stats_get_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/stats',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_territory_get(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionTerritoriesReponse:
        """Get a list of your faction's territories

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_territory_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoriesReponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_territory_get_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionTerritoriesReponse]:
        """Get a list of your faction's territories

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_territory_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoriesReponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_territory_get_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of your faction's territories

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_territory_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoriesReponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_territory_get_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/territory',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_territory_war_id_territorywarreport_get(
        self,
        territory_war_id: Annotated[StrictInt, Field(description="Territory war id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionTerritoryWarReportResponse:
        """Get territory war details

        Requires public access key. <br> 

        :param territory_war_id: Territory war id (required)
        :type territory_war_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_territory_war_id_territorywarreport_get_serialize(
            territory_war_id=territory_war_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoryWarReportResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_territory_war_id_territorywarreport_get_with_http_info(
        self,
        territory_war_id: Annotated[StrictInt, Field(description="Territory war id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionTerritoryWarReportResponse]:
        """Get territory war details

        Requires public access key. <br> 

        :param territory_war_id: Territory war id (required)
        :type territory_war_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_territory_war_id_territorywarreport_get_serialize(
            territory_war_id=territory_war_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoryWarReportResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_territory_war_id_territorywarreport_get_without_preload_content(
        self,
        territory_war_id: Annotated[StrictInt, Field(description="Territory war id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get territory war details

        Requires public access key. <br> 

        :param territory_war_id: Territory war id (required)
        :type territory_war_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_territory_war_id_territorywarreport_get_serialize(
            territory_war_id=territory_war_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoryWarReportResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_territory_war_id_territorywarreport_get_serialize(
        self,
        territory_war_id,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if territory_war_id is not None:
            _path_params['territoryWarId'] = territory_war_id
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/{territoryWarId}/territorywarreport',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_territoryownership_get(
        self,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        limit: Optional[Annotated[int, Field(le=500, strict=True, ge=1)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionTerritoriesOwnershipResponse:
        """Get a list of your faction's territories

        Requires public access key. <br>

        :param offset:
        :type offset: int
        :param limit:
        :type limit: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_territoryownership_get_serialize(
            offset=offset,
            limit=limit,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoriesOwnershipResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_territoryownership_get_with_http_info(
        self,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        limit: Optional[Annotated[int, Field(le=500, strict=True, ge=1)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionTerritoriesOwnershipResponse]:
        """Get a list of your faction's territories

        Requires public access key. <br>

        :param offset:
        :type offset: int
        :param limit:
        :type limit: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_territoryownership_get_serialize(
            offset=offset,
            limit=limit,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoriesOwnershipResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_territoryownership_get_without_preload_content(
        self,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        limit: Optional[Annotated[int, Field(le=500, strict=True, ge=1)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of your faction's territories

        Requires public access key. <br>

        :param offset:
        :type offset: int
        :param limit:
        :type limit: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_territoryownership_get_serialize(
            offset=offset,
            limit=limit,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoriesOwnershipResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_territoryownership_get_serialize(
        self,
        offset,
        limit,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/territoryownership',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_territorywars_get(
        self,
        cat: Optional[FactionTerritoryWarsCategoryEnum] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionTerritoryWarsResponse:
        """Get territory wars list

        Requires public access key. <br> When category 'finished' is chosen, you can use 'from', 'to' & 'sort' query parameters.<br>When category 'ongoing' is chosen, all currently active territory wars are returned.<br>When no category is chosen, this selection will return territory war history of your own faction (if any).

        :param cat:
        :type cat: FactionTerritoryWarsCategoryEnum
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param limit:
        :type limit: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_territorywars_get_serialize(
            cat=cat,
            var_from=var_from,
            to=to,
            sort=sort,
            limit=limit,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoryWarsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_territorywars_get_with_http_info(
        self,
        cat: Optional[FactionTerritoryWarsCategoryEnum] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionTerritoryWarsResponse]:
        """Get territory wars list

        Requires public access key. <br> When category 'finished' is chosen, you can use 'from', 'to' & 'sort' query parameters.<br>When category 'ongoing' is chosen, all currently active territory wars are returned.<br>When no category is chosen, this selection will return territory war history of your own faction (if any).

        :param cat:
        :type cat: FactionTerritoryWarsCategoryEnum
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param limit:
        :type limit: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_territorywars_get_serialize(
            cat=cat,
            var_from=var_from,
            to=to,
            sort=sort,
            limit=limit,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoryWarsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_territorywars_get_without_preload_content(
        self,
        cat: Optional[FactionTerritoryWarsCategoryEnum] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get territory wars list

        Requires public access key. <br> When category 'finished' is chosen, you can use 'from', 'to' & 'sort' query parameters.<br>When category 'ongoing' is chosen, all currently active territory wars are returned.<br>When no category is chosen, this selection will return territory war history of your own faction (if any).

        :param cat:
        :type cat: FactionTerritoryWarsCategoryEnum
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param limit:
        :type limit: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_territorywars_get_serialize(
            cat=cat,
            var_from=var_from,
            to=to,
            sort=sort,
            limit=limit,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoryWarsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_territorywars_get_serialize(
        self,
        cat,
        var_from,
        to,
        sort,
        limit,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if cat is not None:
            
            _query_params.append(('cat', cat.value))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/territorywars',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_timestamp_get(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TimestampResponse:
        """Get current server time

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_timestamp_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TimestampResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_timestamp_get_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TimestampResponse]:
        """Get current server time

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_timestamp_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TimestampResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_timestamp_get_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get current server time

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_timestamp_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TimestampResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_timestamp_get_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/timestamp',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_upgrades_get(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionUpgradesResponse:
        """Get your faction's upgrades

        Requires minimal access key with faction API access permissions. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_upgrades_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionUpgradesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_upgrades_get_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionUpgradesResponse]:
        """Get your faction's upgrades

        Requires minimal access key with faction API access permissions. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_upgrades_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionUpgradesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_upgrades_get_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's upgrades

        Requires minimal access key with faction API access permissions. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_upgrades_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionUpgradesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_upgrades_get_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/upgrades',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def faction_wars_get(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionWarsResponse:
        """Get your faction's wars & pacts details

        Requires public access key. <br> 

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_wars_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionWarsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def faction_wars_get_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionWarsResponse]:
        """Get your faction's wars & pacts details

        Requires public access key. <br> 

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_wars_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionWarsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def faction_wars_get_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's wars & pacts details

        Requires public access key. <br> 

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._faction_wars_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionWarsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _faction_wars_get_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/wars',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


