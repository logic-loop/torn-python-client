# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 1.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from tornclient.models.attack_log_response import AttackLogResponse
from tornclient.models.faction_territory_enum import FactionTerritoryEnum
from tornclient.models.timestamp_response import TimestampResponse
from tornclient.models.torn_bounties_response import TornBountiesResponse
from tornclient.models.torn_calendar_response import TornCalendarResponse
from tornclient.models.torn_crimes_response import TornCrimesResponse
from tornclient.models.torn_education_response import TornEducationResponse
from tornclient.models.torn_faction_hof_category import TornFactionHofCategory
from tornclient.models.torn_faction_hof_response import TornFactionHofResponse
from tornclient.models.torn_faction_tree_response import TornFactionTreeResponse
from tornclient.models.torn_get200_response import TornGet200Response
from tornclient.models.torn_hof_category import TornHofCategory
from tornclient.models.torn_hof_response import TornHofResponse
from tornclient.models.torn_item_ammo_response import TornItemAmmoResponse
from tornclient.models.torn_item_category import TornItemCategory
from tornclient.models.torn_item_mods_response import TornItemModsResponse
from tornclient.models.torn_items_response import TornItemsResponse
from tornclient.models.torn_log_categories_response import TornLogCategoriesResponse
from tornclient.models.torn_log_types_response import TornLogTypesResponse
from tornclient.models.torn_lookup_response import TornLookupResponse
from tornclient.models.torn_selection_name import TornSelectionName
from tornclient.models.torn_subcrimes_response import TornSubcrimesResponse
from tornclient.models.torn_territories_response import TornTerritoriesResponse

from tornclient.api_client import ApiClient, RequestSerialized
from tornclient.api_response import ApiResponse
from tornclient.rest import RESTResponseType


class TornApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def torn_attacklog_get(
        self,
        log: Annotated[StrictStr, Field(description="Code of the attack log. E.g. d51ad4fe6be884b309b142e2d1d4f807")],
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AttackLogResponse:
        """Get attack log details

        Requires public key. <br>

        :param log: Code of the attack log. E.g. d51ad4fe6be884b309b142e2d1d4f807 (required)
        :type log: str
        :param offset:
        :type offset: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_attacklog_get_serialize(
            log=log,
            offset=offset,
            sort=sort,
            striptags=striptags,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AttackLogResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def torn_attacklog_get_with_http_info(
        self,
        log: Annotated[StrictStr, Field(description="Code of the attack log. E.g. d51ad4fe6be884b309b142e2d1d4f807")],
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AttackLogResponse]:
        """Get attack log details

        Requires public key. <br>

        :param log: Code of the attack log. E.g. d51ad4fe6be884b309b142e2d1d4f807 (required)
        :type log: str
        :param offset:
        :type offset: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_attacklog_get_serialize(
            log=log,
            offset=offset,
            sort=sort,
            striptags=striptags,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AttackLogResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def torn_attacklog_get_without_preload_content(
        self,
        log: Annotated[StrictStr, Field(description="Code of the attack log. E.g. d51ad4fe6be884b309b142e2d1d4f807")],
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get attack log details

        Requires public key. <br>

        :param log: Code of the attack log. E.g. d51ad4fe6be884b309b142e2d1d4f807 (required)
        :type log: str
        :param offset:
        :type offset: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_attacklog_get_serialize(
            log=log,
            offset=offset,
            sort=sort,
            striptags=striptags,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AttackLogResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _torn_attacklog_get_serialize(
        self,
        log,
        offset,
        sort,
        striptags,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if log is not None:
            
            _query_params.append(('log', log))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if striptags is not None:
            
            _query_params.append(('striptags', striptags))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/torn/attacklog',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def torn_bounties_get(
        self,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TornBountiesResponse:
        """Get bounties

        Requires public key. <br>

        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_bounties_get_serialize(
            limit=limit,
            offset=offset,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornBountiesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def torn_bounties_get_with_http_info(
        self,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TornBountiesResponse]:
        """Get bounties

        Requires public key. <br>

        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_bounties_get_serialize(
            limit=limit,
            offset=offset,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornBountiesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def torn_bounties_get_without_preload_content(
        self,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get bounties

        Requires public key. <br>

        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_bounties_get_serialize(
            limit=limit,
            offset=offset,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornBountiesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _torn_bounties_get_serialize(
        self,
        limit,
        offset,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/torn/bounties',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def torn_calendar_get(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TornCalendarResponse:
        """Get calendar information

        Requires public access key. <br> Get the details about competitions & events in the running year.

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_calendar_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornCalendarResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def torn_calendar_get_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TornCalendarResponse]:
        """Get calendar information

        Requires public access key. <br> Get the details about competitions & events in the running year.

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_calendar_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornCalendarResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def torn_calendar_get_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get calendar information

        Requires public access key. <br> Get the details about competitions & events in the running year.

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_calendar_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornCalendarResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _torn_calendar_get_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/torn/calendar',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def torn_crime_id_subcrimes_get(
        self,
        crime_id: Annotated[StrictInt, Field(description="Crime id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TornSubcrimesResponse:
        """Get Subcrimes information

        Requires public access key. <br> Return the details about possible actions for a specific crime.

        :param crime_id: Crime id (required)
        :type crime_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_crime_id_subcrimes_get_serialize(
            crime_id=crime_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornSubcrimesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def torn_crime_id_subcrimes_get_with_http_info(
        self,
        crime_id: Annotated[StrictInt, Field(description="Crime id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TornSubcrimesResponse]:
        """Get Subcrimes information

        Requires public access key. <br> Return the details about possible actions for a specific crime.

        :param crime_id: Crime id (required)
        :type crime_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_crime_id_subcrimes_get_serialize(
            crime_id=crime_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornSubcrimesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def torn_crime_id_subcrimes_get_without_preload_content(
        self,
        crime_id: Annotated[StrictInt, Field(description="Crime id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Subcrimes information

        Requires public access key. <br> Return the details about possible actions for a specific crime.

        :param crime_id: Crime id (required)
        :type crime_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_crime_id_subcrimes_get_serialize(
            crime_id=crime_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornSubcrimesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _torn_crime_id_subcrimes_get_serialize(
        self,
        crime_id,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if crime_id is not None:
            _path_params['crimeId'] = crime_id
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/torn/{crimeId}/subcrimes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def torn_crimes_get(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TornCrimesResponse:
        """Get crimes information

        Requires public access key. <br> Return the details about released crimes.

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_crimes_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornCrimesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def torn_crimes_get_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TornCrimesResponse]:
        """Get crimes information

        Requires public access key. <br> Return the details about released crimes.

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_crimes_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornCrimesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def torn_crimes_get_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get crimes information

        Requires public access key. <br> Return the details about released crimes.

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_crimes_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornCrimesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _torn_crimes_get_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/torn/crimes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def torn_education_get(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TornEducationResponse:
        """Get education information

        Requires public access key.<br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_education_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornEducationResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def torn_education_get_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TornEducationResponse]:
        """Get education information

        Requires public access key.<br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_education_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornEducationResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def torn_education_get_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get education information

        Requires public access key.<br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_education_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornEducationResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _torn_education_get_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/torn/education',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def torn_factionhof_get(
        self,
        cat: Annotated[TornFactionHofCategory, Field(description="Leaderboards category")],
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TornFactionHofResponse:
        """Get faction hall of fame positions for a specific category

        Requires public access key. <br> 

        :param cat: Leaderboards category (required)
        :type cat: TornFactionHofCategory
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_factionhof_get_serialize(
            cat=cat,
            limit=limit,
            offset=offset,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornFactionHofResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def torn_factionhof_get_with_http_info(
        self,
        cat: Annotated[TornFactionHofCategory, Field(description="Leaderboards category")],
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TornFactionHofResponse]:
        """Get faction hall of fame positions for a specific category

        Requires public access key. <br> 

        :param cat: Leaderboards category (required)
        :type cat: TornFactionHofCategory
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_factionhof_get_serialize(
            cat=cat,
            limit=limit,
            offset=offset,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornFactionHofResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def torn_factionhof_get_without_preload_content(
        self,
        cat: Annotated[TornFactionHofCategory, Field(description="Leaderboards category")],
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get faction hall of fame positions for a specific category

        Requires public access key. <br> 

        :param cat: Leaderboards category (required)
        :type cat: TornFactionHofCategory
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_factionhof_get_serialize(
            cat=cat,
            limit=limit,
            offset=offset,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornFactionHofResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _torn_factionhof_get_serialize(
        self,
        cat,
        limit,
        offset,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if cat is not None:
            
            _query_params.append(('cat', cat.value))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/torn/factionhof',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def torn_factiontree_get(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TornFactionTreeResponse:
        """Get full faction tree

        Requires public access key. <br> 

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_factiontree_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornFactionTreeResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def torn_factiontree_get_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TornFactionTreeResponse]:
        """Get full faction tree

        Requires public access key. <br> 

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_factiontree_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornFactionTreeResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def torn_factiontree_get_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get full faction tree

        Requires public access key. <br> 

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_factiontree_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornFactionTreeResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _torn_factiontree_get_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/torn/factiontree',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def torn_get(
        self,
        selections: Annotated[Optional[List[TornSelectionName]], Field(description="Selection names")] = None,
        id: Annotated[Optional[StrictStr], Field(description="selection id")] = None,
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        limit: Optional[Annotated[int, Field(strict=True, ge=1)]] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        cat: Annotated[Optional[StrictStr], Field(description="Selection category")] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TornGet200Response:
        """Get any Torn selection

        Requires public access key. <br> Choose one or more selections (comma separated).

        :param selections: Selection names
        :type selections: List[TornSelectionName]
        :param id: selection id
        :type id: str
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param limit:
        :type limit: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param cat: Selection category
        :type cat: str
        :param offset:
        :type offset: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_get_serialize(
            selections=selections,
            id=id,
            striptags=striptags,
            limit=limit,
            to=to,
            var_from=var_from,
            sort=sort,
            cat=cat,
            offset=offset,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def torn_get_with_http_info(
        self,
        selections: Annotated[Optional[List[TornSelectionName]], Field(description="Selection names")] = None,
        id: Annotated[Optional[StrictStr], Field(description="selection id")] = None,
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        limit: Optional[Annotated[int, Field(strict=True, ge=1)]] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        cat: Annotated[Optional[StrictStr], Field(description="Selection category")] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TornGet200Response]:
        """Get any Torn selection

        Requires public access key. <br> Choose one or more selections (comma separated).

        :param selections: Selection names
        :type selections: List[TornSelectionName]
        :param id: selection id
        :type id: str
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param limit:
        :type limit: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param cat: Selection category
        :type cat: str
        :param offset:
        :type offset: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_get_serialize(
            selections=selections,
            id=id,
            striptags=striptags,
            limit=limit,
            to=to,
            var_from=var_from,
            sort=sort,
            cat=cat,
            offset=offset,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def torn_get_without_preload_content(
        self,
        selections: Annotated[Optional[List[TornSelectionName]], Field(description="Selection names")] = None,
        id: Annotated[Optional[StrictStr], Field(description="selection id")] = None,
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        limit: Optional[Annotated[int, Field(strict=True, ge=1)]] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        cat: Annotated[Optional[StrictStr], Field(description="Selection category")] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get any Torn selection

        Requires public access key. <br> Choose one or more selections (comma separated).

        :param selections: Selection names
        :type selections: List[TornSelectionName]
        :param id: selection id
        :type id: str
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param limit:
        :type limit: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param cat: Selection category
        :type cat: str
        :param offset:
        :type offset: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_get_serialize(
            selections=selections,
            id=id,
            striptags=striptags,
            limit=limit,
            to=to,
            var_from=var_from,
            sort=sort,
            cat=cat,
            offset=offset,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _torn_get_serialize(
        self,
        selections,
        id,
        striptags,
        limit,
        to,
        var_from,
        sort,
        cat,
        offset,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'selections': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if selections is not None:
            
            _query_params.append(('selections', selections))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        if striptags is not None:
            
            _query_params.append(('striptags', striptags))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if cat is not None:
            
            _query_params.append(('cat', cat))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/torn',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def torn_hof_get(
        self,
        cat: Annotated[TornHofCategory, Field(description="Leaderboards category")],
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TornHofResponse:
        """Get player hall of fame positions for a specific category

        Requires public key.

        :param cat: Leaderboards category (required)
        :type cat: TornHofCategory
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_hof_get_serialize(
            cat=cat,
            limit=limit,
            offset=offset,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornHofResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def torn_hof_get_with_http_info(
        self,
        cat: Annotated[TornHofCategory, Field(description="Leaderboards category")],
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TornHofResponse]:
        """Get player hall of fame positions for a specific category

        Requires public key.

        :param cat: Leaderboards category (required)
        :type cat: TornHofCategory
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_hof_get_serialize(
            cat=cat,
            limit=limit,
            offset=offset,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornHofResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def torn_hof_get_without_preload_content(
        self,
        cat: Annotated[TornHofCategory, Field(description="Leaderboards category")],
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get player hall of fame positions for a specific category

        Requires public key.

        :param cat: Leaderboards category (required)
        :type cat: TornHofCategory
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_hof_get_serialize(
            cat=cat,
            limit=limit,
            offset=offset,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornHofResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _torn_hof_get_serialize(
        self,
        cat,
        limit,
        offset,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if cat is not None:
            
            _query_params.append(('cat', cat.value))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/torn/hof',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def torn_ids_items_get(
        self,
        ids: Annotated[StrictStr, Field(description="Item id or a list of item ids (comma separated)")],
        sort: Annotated[Optional[StrictStr], Field(description="Sort rows from newest to oldest<br>Default ordering is ascending")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TornItemsResponse:
        """Get information about items

        Requires public key.<br>Details are always populated when available.

        :param ids: Item id or a list of item ids (comma separated) (required)
        :type ids: str
        :param sort: Sort rows from newest to oldest<br>Default ordering is ascending
        :type sort: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_ids_items_get_serialize(
            ids=ids,
            sort=sort,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornItemsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def torn_ids_items_get_with_http_info(
        self,
        ids: Annotated[StrictStr, Field(description="Item id or a list of item ids (comma separated)")],
        sort: Annotated[Optional[StrictStr], Field(description="Sort rows from newest to oldest<br>Default ordering is ascending")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TornItemsResponse]:
        """Get information about items

        Requires public key.<br>Details are always populated when available.

        :param ids: Item id or a list of item ids (comma separated) (required)
        :type ids: str
        :param sort: Sort rows from newest to oldest<br>Default ordering is ascending
        :type sort: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_ids_items_get_serialize(
            ids=ids,
            sort=sort,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornItemsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def torn_ids_items_get_without_preload_content(
        self,
        ids: Annotated[StrictStr, Field(description="Item id or a list of item ids (comma separated)")],
        sort: Annotated[Optional[StrictStr], Field(description="Sort rows from newest to oldest<br>Default ordering is ascending")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get information about items

        Requires public key.<br>Details are always populated when available.

        :param ids: Item id or a list of item ids (comma separated) (required)
        :type ids: str
        :param sort: Sort rows from newest to oldest<br>Default ordering is ascending
        :type sort: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_ids_items_get_serialize(
            ids=ids,
            sort=sort,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornItemsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _torn_ids_items_get_serialize(
        self,
        ids,
        sort,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if ids is not None:
            _path_params['ids'] = ids
        # process the query parameters
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/torn/{ids}/items',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def torn_itemammo_get(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TornItemAmmoResponse:
        """Get information about ammo

        Requires public key.

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_itemammo_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornItemAmmoResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def torn_itemammo_get_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TornItemAmmoResponse]:
        """Get information about ammo

        Requires public key.

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_itemammo_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornItemAmmoResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def torn_itemammo_get_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get information about ammo

        Requires public key.

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_itemammo_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornItemAmmoResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _torn_itemammo_get_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/torn/itemammo',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def torn_itemmods_get(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TornItemModsResponse:
        """Get information about weapon upgrades

        Requires public key.

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_itemmods_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornItemModsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def torn_itemmods_get_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TornItemModsResponse]:
        """Get information about weapon upgrades

        Requires public key.

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_itemmods_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornItemModsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def torn_itemmods_get_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get information about weapon upgrades

        Requires public key.

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_itemmods_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornItemModsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _torn_itemmods_get_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/torn/itemmods',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def torn_items_get(
        self,
        cat: Annotated[Optional[TornItemCategory], Field(description="Item category type")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort rows from newest to oldest<br>Default ordering is ascending")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TornItemsResponse:
        """Get information about items

        Requires public key.<br>Default category is 'All'.<br>Details are not populated when requesting the category 'All'.

        :param cat: Item category type
        :type cat: TornItemCategory
        :param sort: Sort rows from newest to oldest<br>Default ordering is ascending
        :type sort: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_items_get_serialize(
            cat=cat,
            sort=sort,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornItemsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def torn_items_get_with_http_info(
        self,
        cat: Annotated[Optional[TornItemCategory], Field(description="Item category type")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort rows from newest to oldest<br>Default ordering is ascending")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TornItemsResponse]:
        """Get information about items

        Requires public key.<br>Default category is 'All'.<br>Details are not populated when requesting the category 'All'.

        :param cat: Item category type
        :type cat: TornItemCategory
        :param sort: Sort rows from newest to oldest<br>Default ordering is ascending
        :type sort: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_items_get_serialize(
            cat=cat,
            sort=sort,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornItemsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def torn_items_get_without_preload_content(
        self,
        cat: Annotated[Optional[TornItemCategory], Field(description="Item category type")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort rows from newest to oldest<br>Default ordering is ascending")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get information about items

        Requires public key.<br>Default category is 'All'.<br>Details are not populated when requesting the category 'All'.

        :param cat: Item category type
        :type cat: TornItemCategory
        :param sort: Sort rows from newest to oldest<br>Default ordering is ascending
        :type sort: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_items_get_serialize(
            cat=cat,
            sort=sort,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornItemsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _torn_items_get_serialize(
        self,
        cat,
        sort,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if cat is not None:
            
            _query_params.append(('cat', cat.value))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/torn/items',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def torn_log_category_id_logtypes_get(
        self,
        log_category_id: Annotated[StrictInt, Field(description="Log category id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TornLogTypesResponse:
        """Get available log ids for a specific log category

        Requires public key. <br>

        :param log_category_id: Log category id (required)
        :type log_category_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_log_category_id_logtypes_get_serialize(
            log_category_id=log_category_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornLogTypesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def torn_log_category_id_logtypes_get_with_http_info(
        self,
        log_category_id: Annotated[StrictInt, Field(description="Log category id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TornLogTypesResponse]:
        """Get available log ids for a specific log category

        Requires public key. <br>

        :param log_category_id: Log category id (required)
        :type log_category_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_log_category_id_logtypes_get_serialize(
            log_category_id=log_category_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornLogTypesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def torn_log_category_id_logtypes_get_without_preload_content(
        self,
        log_category_id: Annotated[StrictInt, Field(description="Log category id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get available log ids for a specific log category

        Requires public key. <br>

        :param log_category_id: Log category id (required)
        :type log_category_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_log_category_id_logtypes_get_serialize(
            log_category_id=log_category_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornLogTypesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _torn_log_category_id_logtypes_get_serialize(
        self,
        log_category_id,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if log_category_id is not None:
            _path_params['logCategoryId'] = log_category_id
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/torn/{logCategoryId}/logtypes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def torn_logcategories_get(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TornLogCategoriesResponse:
        """Get available log categories

        Requires public key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_logcategories_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornLogCategoriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def torn_logcategories_get_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TornLogCategoriesResponse]:
        """Get available log categories

        Requires public key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_logcategories_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornLogCategoriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def torn_logcategories_get_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get available log categories

        Requires public key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_logcategories_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornLogCategoriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _torn_logcategories_get_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/torn/logcategories',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def torn_logtypes_get(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TornLogTypesResponse:
        """Get all available log ids

        Requires public key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_logtypes_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornLogTypesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def torn_logtypes_get_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TornLogTypesResponse]:
        """Get all available log ids

        Requires public key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_logtypes_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornLogTypesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def torn_logtypes_get_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all available log ids

        Requires public key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_logtypes_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornLogTypesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _torn_logtypes_get_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/torn/logtypes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def torn_lookup_get(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TornLookupResponse:
        """Get all available torn selections

        Requires public key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_lookup_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornLookupResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def torn_lookup_get_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TornLookupResponse]:
        """Get all available torn selections

        Requires public key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_lookup_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornLookupResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def torn_lookup_get_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all available torn selections

        Requires public key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_lookup_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornLookupResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _torn_lookup_get_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/torn/lookup',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def torn_territory_get(
        self,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        limit: Optional[Annotated[int, Field(le=250, strict=True, ge=1)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TornTerritoriesResponse:
        """Get territory details

        Requires public access key. <br>

        :param offset:
        :type offset: int
        :param limit:
        :type limit: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_territory_get_serialize(
            offset=offset,
            limit=limit,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornTerritoriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def torn_territory_get_with_http_info(
        self,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        limit: Optional[Annotated[int, Field(le=250, strict=True, ge=1)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TornTerritoriesResponse]:
        """Get territory details

        Requires public access key. <br>

        :param offset:
        :type offset: int
        :param limit:
        :type limit: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_territory_get_serialize(
            offset=offset,
            limit=limit,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornTerritoriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def torn_territory_get_without_preload_content(
        self,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        limit: Optional[Annotated[int, Field(le=250, strict=True, ge=1)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get territory details

        Requires public access key. <br>

        :param offset:
        :type offset: int
        :param limit:
        :type limit: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_territory_get_serialize(
            offset=offset,
            limit=limit,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornTerritoriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _torn_territory_get_serialize(
        self,
        offset,
        limit,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/torn/territory',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def torn_territory_ids_territory_get(
        self,
        territory_ids: Annotated[FactionTerritoryEnum, Field(description="Territory id or a list of territory ids (comma separated)")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TornTerritoriesResponse:
        """Get territory details

        Requires public access key. <br>

        :param territory_ids: Territory id or a list of territory ids (comma separated) (required)
        :type territory_ids: FactionTerritoryEnum
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_territory_ids_territory_get_serialize(
            territory_ids=territory_ids,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornTerritoriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def torn_territory_ids_territory_get_with_http_info(
        self,
        territory_ids: Annotated[FactionTerritoryEnum, Field(description="Territory id or a list of territory ids (comma separated)")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TornTerritoriesResponse]:
        """Get territory details

        Requires public access key. <br>

        :param territory_ids: Territory id or a list of territory ids (comma separated) (required)
        :type territory_ids: FactionTerritoryEnum
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_territory_ids_territory_get_serialize(
            territory_ids=territory_ids,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornTerritoriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def torn_territory_ids_territory_get_without_preload_content(
        self,
        territory_ids: Annotated[FactionTerritoryEnum, Field(description="Territory id or a list of territory ids (comma separated)")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get territory details

        Requires public access key. <br>

        :param territory_ids: Territory id or a list of territory ids (comma separated) (required)
        :type territory_ids: FactionTerritoryEnum
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_territory_ids_territory_get_serialize(
            territory_ids=territory_ids,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TornTerritoriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _torn_territory_ids_territory_get_serialize(
        self,
        territory_ids,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if territory_ids is not None:
            _path_params['territoryIds'] = territory_ids.value
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/torn/{territoryIds}/territory',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def torn_timestamp_get(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TimestampResponse:
        """Get current server time

        Requires public key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_timestamp_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TimestampResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def torn_timestamp_get_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TimestampResponse]:
        """Get current server time

        Requires public key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_timestamp_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TimestampResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def torn_timestamp_get_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get current server time

        Requires public key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._torn_timestamp_get_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TimestampResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _torn_timestamp_get_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/torn/timestamp',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


