# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 1.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from tornclient.models.revive_setting import ReviveSetting
from tornclient.models.user_last_action import UserLastAction
from tornclient.models.user_life import UserLife
from tornclient.models.user_status import UserStatus
from typing import Optional, Set
from typing_extensions import Self

class FactionMember(BaseModel):
    """
    Details about a faction member.
    """ # noqa: E501
    id: StrictInt
    name: StrictStr
    position: StrictStr
    level: StrictInt
    days_in_faction: StrictInt
    is_revivable: StrictBool
    is_on_wall: StrictBool = Field(description="Shows if the member is currently defending territory wall.")
    is_in_oc: StrictBool = Field(description="Shows if the member is currently participating in an organized crime. Show false for members of other factions.")
    has_early_discharge: StrictBool = Field(description="Shows if the member is eligible for an early discharge from the hospital.")
    last_action: UserLastAction
    status: UserStatus
    life: Optional[UserLife] = None
    revive_setting: ReviveSetting
    __properties: ClassVar[List[str]] = ["id", "name", "position", "level", "days_in_faction", "is_revivable", "is_on_wall", "is_in_oc", "has_early_discharge", "last_action", "status", "life", "revive_setting"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FactionMember from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of last_action
        if self.last_action:
            _dict['last_action'] = self.last_action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of life
        if self.life:
            _dict['life'] = self.life.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FactionMember from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "position": obj.get("position"),
            "level": obj.get("level"),
            "days_in_faction": obj.get("days_in_faction"),
            "is_revivable": obj.get("is_revivable"),
            "is_on_wall": obj.get("is_on_wall"),
            "is_in_oc": obj.get("is_in_oc"),
            "has_early_discharge": obj.get("has_early_discharge"),
            "last_action": UserLastAction.from_dict(obj["last_action"]) if obj.get("last_action") is not None else None,
            "status": UserStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "life": UserLife.from_dict(obj["life"]) if obj.get("life") is not None else None,
            "revive_setting": obj.get("revive_setting")
        })
        return _obj


