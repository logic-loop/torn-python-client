# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 1.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from tornclient.models.torn_item_details import TornItemDetails
from tornclient.models.torn_item_type_enum import TornItemTypeEnum
from tornclient.models.torn_item_value import TornItemValue
from tornclient.models.torn_item_weapon_type_enum import TornItemWeaponTypeEnum
from typing import Optional, Set
from typing_extensions import Self

class TornItem(BaseModel):
    """
    TornItem
    """ # noqa: E501
    id: StrictInt
    name: StrictStr
    description: StrictStr
    effect: Optional[StrictStr]
    requirement: Optional[StrictStr]
    image: StrictStr
    type: TornItemTypeEnum
    sub_type: Optional[TornItemWeaponTypeEnum]
    is_masked: StrictBool
    is_tradable: StrictBool
    is_found_in_city: StrictBool
    value: TornItemValue
    circulation: StrictInt
    details: Optional[TornItemDetails]
    __properties: ClassVar[List[str]] = ["id", "name", "description", "effect", "requirement", "image", "type", "sub_type", "is_masked", "is_tradable", "is_found_in_city", "value", "circulation", "details"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TornItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of value
        if self.value:
            _dict['value'] = self.value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of details
        if self.details:
            _dict['details'] = self.details.to_dict()
        # set to None if effect (nullable) is None
        # and model_fields_set contains the field
        if self.effect is None and "effect" in self.model_fields_set:
            _dict['effect'] = None

        # set to None if requirement (nullable) is None
        # and model_fields_set contains the field
        if self.requirement is None and "requirement" in self.model_fields_set:
            _dict['requirement'] = None

        # set to None if sub_type (nullable) is None
        # and model_fields_set contains the field
        if self.sub_type is None and "sub_type" in self.model_fields_set:
            _dict['sub_type'] = None

        # set to None if details (nullable) is None
        # and model_fields_set contains the field
        if self.details is None and "details" in self.model_fields_set:
            _dict['details'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TornItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "effect": obj.get("effect"),
            "requirement": obj.get("requirement"),
            "image": obj.get("image"),
            "type": obj.get("type"),
            "sub_type": obj.get("sub_type"),
            "is_masked": obj.get("is_masked"),
            "is_tradable": obj.get("is_tradable"),
            "is_found_in_city": obj.get("is_found_in_city"),
            "value": TornItemValue.from_dict(obj["value"]) if obj.get("value") is not None else None,
            "circulation": obj.get("circulation"),
            "details": TornItemDetails.from_dict(obj["details"]) if obj.get("details") is not None else None
        })
        return _obj


