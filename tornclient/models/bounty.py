# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 1.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Bounty(BaseModel):
    """
    Bounty
    """ # noqa: E501
    target_id: StrictInt
    target_name: StrictStr
    target_level: StrictInt
    lister_id: StrictInt
    lister_name: Optional[StrictStr]
    reward: StrictInt
    reason: Optional[StrictStr]
    quantity: StrictInt
    is_anonymous: StrictBool
    valid_until: StrictInt
    __properties: ClassVar[List[str]] = ["target_id", "target_name", "target_level", "lister_id", "lister_name", "reward", "reason", "quantity", "is_anonymous", "valid_until"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Bounty from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if lister_name (nullable) is None
        # and model_fields_set contains the field
        if self.lister_name is None and "lister_name" in self.model_fields_set:
            _dict['lister_name'] = None

        # set to None if reason (nullable) is None
        # and model_fields_set contains the field
        if self.reason is None and "reason" in self.model_fields_set:
            _dict['reason'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Bounty from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "target_id": obj.get("target_id"),
            "target_name": obj.get("target_name"),
            "target_level": obj.get("target_level"),
            "lister_id": obj.get("lister_id"),
            "lister_name": obj.get("lister_name"),
            "reward": obj.get("reward"),
            "reason": obj.get("reason"),
            "quantity": obj.get("quantity"),
            "is_anonymous": obj.get("is_anonymous"),
            "valid_until": obj.get("valid_until")
        })
        return _obj


