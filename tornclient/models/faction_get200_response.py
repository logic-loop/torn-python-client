# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 1.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Optional
from tornclient.models.faction_applications_response import FactionApplicationsResponse
from tornclient.models.faction_attacks_full_response import FactionAttacksFullResponse
from tornclient.models.faction_attacks_response import FactionAttacksResponse
from tornclient.models.faction_balance_response import FactionBalanceResponse
from tornclient.models.faction_basic_response import FactionBasicResponse
from tornclient.models.faction_chain_report_response import FactionChainReportResponse
from tornclient.models.faction_chains_response import FactionChainsResponse
from tornclient.models.faction_contributors_response import FactionContributorsResponse
from tornclient.models.faction_crime_response import FactionCrimeResponse
from tornclient.models.faction_crimes_response import FactionCrimesResponse
from tornclient.models.faction_hof_response import FactionHofResponse
from tornclient.models.faction_lookup_response import FactionLookupResponse
from tornclient.models.faction_members_response import FactionMembersResponse
from tornclient.models.faction_news_response import FactionNewsResponse
from tornclient.models.faction_ongoing_chain_response import FactionOngoingChainResponse
from tornclient.models.faction_positions_response import FactionPositionsResponse
from tornclient.models.faction_rackets_reponse import FactionRacketsReponse
from tornclient.models.faction_ranked_war_report_response import FactionRankedWarReportResponse
from tornclient.models.faction_ranked_war_response import FactionRankedWarResponse
from tornclient.models.faction_stats_response import FactionStatsResponse
from tornclient.models.faction_territories_ownership_response import FactionTerritoriesOwnershipResponse
from tornclient.models.faction_territories_reponse import FactionTerritoriesReponse
from tornclient.models.faction_territory_war_report_response import FactionTerritoryWarReportResponse
from tornclient.models.faction_territory_wars_history_response import FactionTerritoryWarsHistoryResponse
from tornclient.models.faction_territory_wars_response import FactionTerritoryWarsResponse
from tornclient.models.faction_upgrades_response import FactionUpgradesResponse
from tornclient.models.faction_wars_response import FactionWarsResponse
from tornclient.models.revives_full_response import RevivesFullResponse
from tornclient.models.revives_response import RevivesResponse
from tornclient.models.timestamp_response import TimestampResponse
from typing import Union, Any, List, Set, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal, Self
from pydantic import Field

FACTIONGET200RESPONSE_ANY_OF_SCHEMAS = ["FactionApplicationsResponse", "FactionAttacksFullResponse", "FactionAttacksResponse", "FactionBalanceResponse", "FactionBasicResponse", "FactionChainReportResponse", "FactionChainsResponse", "FactionContributorsResponse", "FactionCrimeResponse", "FactionCrimesResponse", "FactionHofResponse", "FactionLookupResponse", "FactionMembersResponse", "FactionNewsResponse", "FactionOngoingChainResponse", "FactionPositionsResponse", "FactionRacketsReponse", "FactionRankedWarReportResponse", "FactionRankedWarResponse", "FactionStatsResponse", "FactionTerritoriesOwnershipResponse", "FactionTerritoriesReponse", "FactionTerritoryWarReportResponse", "FactionTerritoryWarsHistoryResponse", "FactionTerritoryWarsResponse", "FactionUpgradesResponse", "FactionWarsResponse", "RevivesFullResponse", "RevivesResponse", "TimestampResponse"]

class FactionGet200Response(BaseModel):
    """
    FactionGet200Response
    """

    # data type: FactionHofResponse
    anyof_schema_1_validator: Optional[FactionHofResponse] = None
    # data type: FactionMembersResponse
    anyof_schema_2_validator: Optional[FactionMembersResponse] = None
    # data type: FactionBasicResponse
    anyof_schema_3_validator: Optional[FactionBasicResponse] = None
    # data type: FactionWarsResponse
    anyof_schema_4_validator: Optional[FactionWarsResponse] = None
    # data type: FactionNewsResponse
    anyof_schema_5_validator: Optional[FactionNewsResponse] = None
    # data type: RevivesResponse
    anyof_schema_6_validator: Optional[RevivesResponse] = None
    # data type: FactionTerritoryWarsHistoryResponse
    anyof_schema_7_validator: Optional[FactionTerritoryWarsHistoryResponse] = None
    # data type: FactionAttacksResponse
    anyof_schema_8_validator: Optional[FactionAttacksResponse] = None
    # data type: FactionBalanceResponse
    anyof_schema_9_validator: Optional[FactionBalanceResponse] = None
    # data type: FactionTerritoriesOwnershipResponse
    anyof_schema_10_validator: Optional[FactionTerritoriesOwnershipResponse] = None
    # data type: FactionPositionsResponse
    anyof_schema_11_validator: Optional[FactionPositionsResponse] = None
    # data type: RevivesFullResponse
    anyof_schema_12_validator: Optional[RevivesFullResponse] = None
    # data type: FactionAttacksFullResponse
    anyof_schema_13_validator: Optional[FactionAttacksFullResponse] = None
    # data type: FactionApplicationsResponse
    anyof_schema_14_validator: Optional[FactionApplicationsResponse] = None
    # data type: FactionOngoingChainResponse
    anyof_schema_15_validator: Optional[FactionOngoingChainResponse] = None
    # data type: FactionChainsResponse
    anyof_schema_16_validator: Optional[FactionChainsResponse] = None
    # data type: FactionChainReportResponse
    anyof_schema_17_validator: Optional[FactionChainReportResponse] = None
    # data type: FactionCrimesResponse
    anyof_schema_18_validator: Optional[FactionCrimesResponse] = None
    # data type: FactionCrimeResponse
    anyof_schema_19_validator: Optional[FactionCrimeResponse] = None
    # data type: FactionRankedWarReportResponse
    anyof_schema_20_validator: Optional[FactionRankedWarReportResponse] = None
    # data type: FactionTerritoryWarReportResponse
    anyof_schema_21_validator: Optional[FactionTerritoryWarReportResponse] = None
    # data type: FactionTerritoriesReponse
    anyof_schema_22_validator: Optional[FactionTerritoriesReponse] = None
    # data type: FactionUpgradesResponse
    anyof_schema_23_validator: Optional[FactionUpgradesResponse] = None
    # data type: FactionStatsResponse
    anyof_schema_24_validator: Optional[FactionStatsResponse] = None
    # data type: FactionTerritoryWarsResponse
    anyof_schema_25_validator: Optional[FactionTerritoryWarsResponse] = None
    # data type: FactionContributorsResponse
    anyof_schema_26_validator: Optional[FactionContributorsResponse] = None
    # data type: FactionRacketsReponse
    anyof_schema_27_validator: Optional[FactionRacketsReponse] = None
    # data type: FactionRankedWarResponse
    anyof_schema_28_validator: Optional[FactionRankedWarResponse] = None
    # data type: FactionLookupResponse
    anyof_schema_29_validator: Optional[FactionLookupResponse] = None
    # data type: TimestampResponse
    anyof_schema_30_validator: Optional[TimestampResponse] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[FactionApplicationsResponse, FactionAttacksFullResponse, FactionAttacksResponse, FactionBalanceResponse, FactionBasicResponse, FactionChainReportResponse, FactionChainsResponse, FactionContributorsResponse, FactionCrimeResponse, FactionCrimesResponse, FactionHofResponse, FactionLookupResponse, FactionMembersResponse, FactionNewsResponse, FactionOngoingChainResponse, FactionPositionsResponse, FactionRacketsReponse, FactionRankedWarReportResponse, FactionRankedWarResponse, FactionStatsResponse, FactionTerritoriesOwnershipResponse, FactionTerritoriesReponse, FactionTerritoryWarReportResponse, FactionTerritoryWarsHistoryResponse, FactionTerritoryWarsResponse, FactionUpgradesResponse, FactionWarsResponse, RevivesFullResponse, RevivesResponse, TimestampResponse]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: Set[str] = { "FactionApplicationsResponse", "FactionAttacksFullResponse", "FactionAttacksResponse", "FactionBalanceResponse", "FactionBasicResponse", "FactionChainReportResponse", "FactionChainsResponse", "FactionContributorsResponse", "FactionCrimeResponse", "FactionCrimesResponse", "FactionHofResponse", "FactionLookupResponse", "FactionMembersResponse", "FactionNewsResponse", "FactionOngoingChainResponse", "FactionPositionsResponse", "FactionRacketsReponse", "FactionRankedWarReportResponse", "FactionRankedWarResponse", "FactionStatsResponse", "FactionTerritoriesOwnershipResponse", "FactionTerritoriesReponse", "FactionTerritoryWarReportResponse", "FactionTerritoryWarsHistoryResponse", "FactionTerritoryWarsResponse", "FactionUpgradesResponse", "FactionWarsResponse", "RevivesFullResponse", "RevivesResponse", "TimestampResponse" }

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = FactionGet200Response.model_construct()
        error_messages = []
        # validate data type: FactionHofResponse
        if not isinstance(v, FactionHofResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FactionHofResponse`")
        else:
            return v

        # validate data type: FactionMembersResponse
        if not isinstance(v, FactionMembersResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FactionMembersResponse`")
        else:
            return v

        # validate data type: FactionBasicResponse
        if not isinstance(v, FactionBasicResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FactionBasicResponse`")
        else:
            return v

        # validate data type: FactionWarsResponse
        if not isinstance(v, FactionWarsResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FactionWarsResponse`")
        else:
            return v

        # validate data type: FactionNewsResponse
        if not isinstance(v, FactionNewsResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FactionNewsResponse`")
        else:
            return v

        # validate data type: RevivesResponse
        if not isinstance(v, RevivesResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RevivesResponse`")
        else:
            return v

        # validate data type: FactionTerritoryWarsHistoryResponse
        if not isinstance(v, FactionTerritoryWarsHistoryResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FactionTerritoryWarsHistoryResponse`")
        else:
            return v

        # validate data type: FactionAttacksResponse
        if not isinstance(v, FactionAttacksResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FactionAttacksResponse`")
        else:
            return v

        # validate data type: FactionBalanceResponse
        if not isinstance(v, FactionBalanceResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FactionBalanceResponse`")
        else:
            return v

        # validate data type: FactionTerritoriesOwnershipResponse
        if not isinstance(v, FactionTerritoriesOwnershipResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FactionTerritoriesOwnershipResponse`")
        else:
            return v

        # validate data type: FactionPositionsResponse
        if not isinstance(v, FactionPositionsResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FactionPositionsResponse`")
        else:
            return v

        # validate data type: RevivesFullResponse
        if not isinstance(v, RevivesFullResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RevivesFullResponse`")
        else:
            return v

        # validate data type: FactionAttacksFullResponse
        if not isinstance(v, FactionAttacksFullResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FactionAttacksFullResponse`")
        else:
            return v

        # validate data type: FactionApplicationsResponse
        if not isinstance(v, FactionApplicationsResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FactionApplicationsResponse`")
        else:
            return v

        # validate data type: FactionOngoingChainResponse
        if not isinstance(v, FactionOngoingChainResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FactionOngoingChainResponse`")
        else:
            return v

        # validate data type: FactionChainsResponse
        if not isinstance(v, FactionChainsResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FactionChainsResponse`")
        else:
            return v

        # validate data type: FactionChainReportResponse
        if not isinstance(v, FactionChainReportResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FactionChainReportResponse`")
        else:
            return v

        # validate data type: FactionCrimesResponse
        if not isinstance(v, FactionCrimesResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FactionCrimesResponse`")
        else:
            return v

        # validate data type: FactionCrimeResponse
        if not isinstance(v, FactionCrimeResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FactionCrimeResponse`")
        else:
            return v

        # validate data type: FactionRankedWarReportResponse
        if not isinstance(v, FactionRankedWarReportResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FactionRankedWarReportResponse`")
        else:
            return v

        # validate data type: FactionTerritoryWarReportResponse
        if not isinstance(v, FactionTerritoryWarReportResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FactionTerritoryWarReportResponse`")
        else:
            return v

        # validate data type: FactionTerritoriesReponse
        if not isinstance(v, FactionTerritoriesReponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FactionTerritoriesReponse`")
        else:
            return v

        # validate data type: FactionUpgradesResponse
        if not isinstance(v, FactionUpgradesResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FactionUpgradesResponse`")
        else:
            return v

        # validate data type: FactionStatsResponse
        if not isinstance(v, FactionStatsResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FactionStatsResponse`")
        else:
            return v

        # validate data type: FactionTerritoryWarsResponse
        if not isinstance(v, FactionTerritoryWarsResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FactionTerritoryWarsResponse`")
        else:
            return v

        # validate data type: FactionContributorsResponse
        if not isinstance(v, FactionContributorsResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FactionContributorsResponse`")
        else:
            return v

        # validate data type: FactionRacketsReponse
        if not isinstance(v, FactionRacketsReponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FactionRacketsReponse`")
        else:
            return v

        # validate data type: FactionRankedWarResponse
        if not isinstance(v, FactionRankedWarResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FactionRankedWarResponse`")
        else:
            return v

        # validate data type: FactionLookupResponse
        if not isinstance(v, FactionLookupResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FactionLookupResponse`")
        else:
            return v

        # validate data type: TimestampResponse
        if not isinstance(v, TimestampResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TimestampResponse`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in FactionGet200Response with anyOf schemas: FactionApplicationsResponse, FactionAttacksFullResponse, FactionAttacksResponse, FactionBalanceResponse, FactionBasicResponse, FactionChainReportResponse, FactionChainsResponse, FactionContributorsResponse, FactionCrimeResponse, FactionCrimesResponse, FactionHofResponse, FactionLookupResponse, FactionMembersResponse, FactionNewsResponse, FactionOngoingChainResponse, FactionPositionsResponse, FactionRacketsReponse, FactionRankedWarReportResponse, FactionRankedWarResponse, FactionStatsResponse, FactionTerritoriesOwnershipResponse, FactionTerritoriesReponse, FactionTerritoryWarReportResponse, FactionTerritoryWarsHistoryResponse, FactionTerritoryWarsResponse, FactionUpgradesResponse, FactionWarsResponse, RevivesFullResponse, RevivesResponse, TimestampResponse. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[FactionHofResponse] = None
        try:
            instance.actual_instance = FactionHofResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[FactionMembersResponse] = None
        try:
            instance.actual_instance = FactionMembersResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[FactionBasicResponse] = None
        try:
            instance.actual_instance = FactionBasicResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[FactionWarsResponse] = None
        try:
            instance.actual_instance = FactionWarsResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[FactionNewsResponse] = None
        try:
            instance.actual_instance = FactionNewsResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_6_validator: Optional[RevivesResponse] = None
        try:
            instance.actual_instance = RevivesResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_7_validator: Optional[FactionTerritoryWarsHistoryResponse] = None
        try:
            instance.actual_instance = FactionTerritoryWarsHistoryResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_8_validator: Optional[FactionAttacksResponse] = None
        try:
            instance.actual_instance = FactionAttacksResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_9_validator: Optional[FactionBalanceResponse] = None
        try:
            instance.actual_instance = FactionBalanceResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_10_validator: Optional[FactionTerritoriesOwnershipResponse] = None
        try:
            instance.actual_instance = FactionTerritoriesOwnershipResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_11_validator: Optional[FactionPositionsResponse] = None
        try:
            instance.actual_instance = FactionPositionsResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_12_validator: Optional[RevivesFullResponse] = None
        try:
            instance.actual_instance = RevivesFullResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_13_validator: Optional[FactionAttacksFullResponse] = None
        try:
            instance.actual_instance = FactionAttacksFullResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_14_validator: Optional[FactionApplicationsResponse] = None
        try:
            instance.actual_instance = FactionApplicationsResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_15_validator: Optional[FactionOngoingChainResponse] = None
        try:
            instance.actual_instance = FactionOngoingChainResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_16_validator: Optional[FactionChainsResponse] = None
        try:
            instance.actual_instance = FactionChainsResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_17_validator: Optional[FactionChainReportResponse] = None
        try:
            instance.actual_instance = FactionChainReportResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_18_validator: Optional[FactionCrimesResponse] = None
        try:
            instance.actual_instance = FactionCrimesResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_19_validator: Optional[FactionCrimeResponse] = None
        try:
            instance.actual_instance = FactionCrimeResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_20_validator: Optional[FactionRankedWarReportResponse] = None
        try:
            instance.actual_instance = FactionRankedWarReportResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_21_validator: Optional[FactionTerritoryWarReportResponse] = None
        try:
            instance.actual_instance = FactionTerritoryWarReportResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_22_validator: Optional[FactionTerritoriesReponse] = None
        try:
            instance.actual_instance = FactionTerritoriesReponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_23_validator: Optional[FactionUpgradesResponse] = None
        try:
            instance.actual_instance = FactionUpgradesResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_24_validator: Optional[FactionStatsResponse] = None
        try:
            instance.actual_instance = FactionStatsResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_25_validator: Optional[FactionTerritoryWarsResponse] = None
        try:
            instance.actual_instance = FactionTerritoryWarsResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_26_validator: Optional[FactionContributorsResponse] = None
        try:
            instance.actual_instance = FactionContributorsResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_27_validator: Optional[FactionRacketsReponse] = None
        try:
            instance.actual_instance = FactionRacketsReponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_28_validator: Optional[FactionRankedWarResponse] = None
        try:
            instance.actual_instance = FactionRankedWarResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_29_validator: Optional[FactionLookupResponse] = None
        try:
            instance.actual_instance = FactionLookupResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_30_validator: Optional[TimestampResponse] = None
        try:
            instance.actual_instance = TimestampResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into FactionGet200Response with anyOf schemas: FactionApplicationsResponse, FactionAttacksFullResponse, FactionAttacksResponse, FactionBalanceResponse, FactionBasicResponse, FactionChainReportResponse, FactionChainsResponse, FactionContributorsResponse, FactionCrimeResponse, FactionCrimesResponse, FactionHofResponse, FactionLookupResponse, FactionMembersResponse, FactionNewsResponse, FactionOngoingChainResponse, FactionPositionsResponse, FactionRacketsReponse, FactionRankedWarReportResponse, FactionRankedWarResponse, FactionStatsResponse, FactionTerritoriesOwnershipResponse, FactionTerritoriesReponse, FactionTerritoryWarReportResponse, FactionTerritoryWarsHistoryResponse, FactionTerritoryWarsResponse, FactionUpgradesResponse, FactionWarsResponse, RevivesFullResponse, RevivesResponse, TimestampResponse. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], FactionApplicationsResponse, FactionAttacksFullResponse, FactionAttacksResponse, FactionBalanceResponse, FactionBasicResponse, FactionChainReportResponse, FactionChainsResponse, FactionContributorsResponse, FactionCrimeResponse, FactionCrimesResponse, FactionHofResponse, FactionLookupResponse, FactionMembersResponse, FactionNewsResponse, FactionOngoingChainResponse, FactionPositionsResponse, FactionRacketsReponse, FactionRankedWarReportResponse, FactionRankedWarResponse, FactionStatsResponse, FactionTerritoriesOwnershipResponse, FactionTerritoriesReponse, FactionTerritoryWarReportResponse, FactionTerritoryWarsHistoryResponse, FactionTerritoryWarsResponse, FactionUpgradesResponse, FactionWarsResponse, RevivesFullResponse, RevivesResponse, TimestampResponse]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


