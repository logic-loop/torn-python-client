# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 1.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Optional
from tornclient.models.forum_categories_response import ForumCategoriesResponse
from tornclient.models.forum_lookup_response import ForumLookupResponse
from tornclient.models.forum_posts_response import ForumPostsResponse
from tornclient.models.forum_thread_response import ForumThreadResponse
from tornclient.models.forum_threads_response import ForumThreadsResponse
from tornclient.models.timestamp_response import TimestampResponse
from typing import Union, Any, List, Set, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal, Self
from pydantic import Field

FORUMGET200RESPONSE_ANY_OF_SCHEMAS = ["ForumCategoriesResponse", "ForumLookupResponse", "ForumPostsResponse", "ForumThreadResponse", "ForumThreadsResponse", "TimestampResponse"]

class ForumGet200Response(BaseModel):
    """
    ForumGet200Response
    """

    # data type: ForumCategoriesResponse
    anyof_schema_1_validator: Optional[ForumCategoriesResponse] = None
    # data type: ForumThreadsResponse
    anyof_schema_2_validator: Optional[ForumThreadsResponse] = None
    # data type: ForumThreadResponse
    anyof_schema_3_validator: Optional[ForumThreadResponse] = None
    # data type: ForumPostsResponse
    anyof_schema_4_validator: Optional[ForumPostsResponse] = None
    # data type: ForumLookupResponse
    anyof_schema_5_validator: Optional[ForumLookupResponse] = None
    # data type: TimestampResponse
    anyof_schema_6_validator: Optional[TimestampResponse] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[ForumCategoriesResponse, ForumLookupResponse, ForumPostsResponse, ForumThreadResponse, ForumThreadsResponse, TimestampResponse]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: Set[str] = { "ForumCategoriesResponse", "ForumLookupResponse", "ForumPostsResponse", "ForumThreadResponse", "ForumThreadsResponse", "TimestampResponse" }

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = ForumGet200Response.model_construct()
        error_messages = []
        # validate data type: ForumCategoriesResponse
        if not isinstance(v, ForumCategoriesResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ForumCategoriesResponse`")
        else:
            return v

        # validate data type: ForumThreadsResponse
        if not isinstance(v, ForumThreadsResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ForumThreadsResponse`")
        else:
            return v

        # validate data type: ForumThreadResponse
        if not isinstance(v, ForumThreadResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ForumThreadResponse`")
        else:
            return v

        # validate data type: ForumPostsResponse
        if not isinstance(v, ForumPostsResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ForumPostsResponse`")
        else:
            return v

        # validate data type: ForumLookupResponse
        if not isinstance(v, ForumLookupResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ForumLookupResponse`")
        else:
            return v

        # validate data type: TimestampResponse
        if not isinstance(v, TimestampResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TimestampResponse`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in ForumGet200Response with anyOf schemas: ForumCategoriesResponse, ForumLookupResponse, ForumPostsResponse, ForumThreadResponse, ForumThreadsResponse, TimestampResponse. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[ForumCategoriesResponse] = None
        try:
            instance.actual_instance = ForumCategoriesResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[ForumThreadsResponse] = None
        try:
            instance.actual_instance = ForumThreadsResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[ForumThreadResponse] = None
        try:
            instance.actual_instance = ForumThreadResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[ForumPostsResponse] = None
        try:
            instance.actual_instance = ForumPostsResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[ForumLookupResponse] = None
        try:
            instance.actual_instance = ForumLookupResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_6_validator: Optional[TimestampResponse] = None
        try:
            instance.actual_instance = TimestampResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ForumGet200Response with anyOf schemas: ForumCategoriesResponse, ForumLookupResponse, ForumPostsResponse, ForumThreadResponse, ForumThreadsResponse, TimestampResponse. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], ForumCategoriesResponse, ForumLookupResponse, ForumPostsResponse, ForumThreadResponse, ForumThreadsResponse, TimestampResponse]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


