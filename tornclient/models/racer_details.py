# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 1.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from tornclient.models.race_class_enum import RaceClassEnum
from typing import Optional, Set
from typing_extensions import Self

class RacerDetails(BaseModel):
    """
    RacerDetails
    """ # noqa: E501
    driver_id: StrictInt
    position: Optional[StrictInt]
    car_id: StrictInt
    car_item_id: StrictInt
    car_item_name: StrictStr
    car_class: RaceClassEnum
    has_crashed: Optional[StrictBool]
    best_lap_time: Optional[Union[StrictFloat, StrictInt]]
    race_time: Optional[Union[StrictFloat, StrictInt]]
    time_ended: Optional[StrictInt]
    __properties: ClassVar[List[str]] = ["driver_id", "position", "car_id", "car_item_id", "car_item_name", "car_class", "has_crashed", "best_lap_time", "race_time", "time_ended"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RacerDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if position (nullable) is None
        # and model_fields_set contains the field
        if self.position is None and "position" in self.model_fields_set:
            _dict['position'] = None

        # set to None if has_crashed (nullable) is None
        # and model_fields_set contains the field
        if self.has_crashed is None and "has_crashed" in self.model_fields_set:
            _dict['has_crashed'] = None

        # set to None if best_lap_time (nullable) is None
        # and model_fields_set contains the field
        if self.best_lap_time is None and "best_lap_time" in self.model_fields_set:
            _dict['best_lap_time'] = None

        # set to None if race_time (nullable) is None
        # and model_fields_set contains the field
        if self.race_time is None and "race_time" in self.model_fields_set:
            _dict['race_time'] = None

        # set to None if time_ended (nullable) is None
        # and model_fields_set contains the field
        if self.time_ended is None and "time_ended" in self.model_fields_set:
            _dict['time_ended'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RacerDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "driver_id": obj.get("driver_id"),
            "position": obj.get("position"),
            "car_id": obj.get("car_id"),
            "car_item_id": obj.get("car_item_id"),
            "car_item_name": obj.get("car_item_name"),
            "car_class": obj.get("car_class"),
            "has_crashed": obj.get("has_crashed"),
            "best_lap_time": obj.get("best_lap_time"),
            "race_time": obj.get("race_time"),
            "time_ended": obj.get("time_ended")
        })
        return _obj


