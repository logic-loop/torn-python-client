# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 1.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Optional
from tornclient.models.attack_log_response import AttackLogResponse
from tornclient.models.timestamp_response import TimestampResponse
from tornclient.models.torn_bounties_response import TornBountiesResponse
from tornclient.models.torn_calendar_response import TornCalendarResponse
from tornclient.models.torn_crimes_response import TornCrimesResponse
from tornclient.models.torn_education_response import TornEducationResponse
from tornclient.models.torn_faction_hof_response import TornFactionHofResponse
from tornclient.models.torn_faction_tree_response import TornFactionTreeResponse
from tornclient.models.torn_hof_response import TornHofResponse
from tornclient.models.torn_item_ammo_response import TornItemAmmoResponse
from tornclient.models.torn_item_mods_response import TornItemModsResponse
from tornclient.models.torn_items_response import TornItemsResponse
from tornclient.models.torn_log_categories_response import TornLogCategoriesResponse
from tornclient.models.torn_log_types_response import TornLogTypesResponse
from tornclient.models.torn_lookup_response import TornLookupResponse
from tornclient.models.torn_subcrimes_response import TornSubcrimesResponse
from tornclient.models.torn_territories_no_links_reponse import TornTerritoriesNoLinksReponse
from tornclient.models.torn_territories_response import TornTerritoriesResponse
from typing import Union, Any, List, Set, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal, Self
from pydantic import Field

TORNGET200RESPONSE_ANY_OF_SCHEMAS = ["AttackLogResponse", "TimestampResponse", "TornBountiesResponse", "TornCalendarResponse", "TornCrimesResponse", "TornEducationResponse", "TornFactionHofResponse", "TornFactionTreeResponse", "TornHofResponse", "TornItemAmmoResponse", "TornItemModsResponse", "TornItemsResponse", "TornLogCategoriesResponse", "TornLogTypesResponse", "TornLookupResponse", "TornSubcrimesResponse", "TornTerritoriesNoLinksReponse", "TornTerritoriesResponse"]

class TornGet200Response(BaseModel):
    """
    TornGet200Response
    """

    # data type: TornSubcrimesResponse
    anyof_schema_1_validator: Optional[TornSubcrimesResponse] = None
    # data type: TornCrimesResponse
    anyof_schema_2_validator: Optional[TornCrimesResponse] = None
    # data type: TornCalendarResponse
    anyof_schema_3_validator: Optional[TornCalendarResponse] = None
    # data type: TornHofResponse
    anyof_schema_4_validator: Optional[TornHofResponse] = None
    # data type: TornFactionHofResponse
    anyof_schema_5_validator: Optional[TornFactionHofResponse] = None
    # data type: TornLogTypesResponse
    anyof_schema_6_validator: Optional[TornLogTypesResponse] = None
    # data type: TornItemsResponse
    anyof_schema_7_validator: Optional[TornItemsResponse] = None
    # data type: TornLogCategoriesResponse
    anyof_schema_8_validator: Optional[TornLogCategoriesResponse] = None
    # data type: TornEducationResponse
    anyof_schema_9_validator: Optional[TornEducationResponse] = None
    # data type: TornBountiesResponse
    anyof_schema_10_validator: Optional[TornBountiesResponse] = None
    # data type: TornItemAmmoResponse
    anyof_schema_11_validator: Optional[TornItemAmmoResponse] = None
    # data type: TornFactionTreeResponse
    anyof_schema_12_validator: Optional[TornFactionTreeResponse] = None
    # data type: AttackLogResponse
    anyof_schema_13_validator: Optional[AttackLogResponse] = None
    # data type: TornTerritoriesResponse
    anyof_schema_14_validator: Optional[TornTerritoriesResponse] = None
    # data type: TornTerritoriesNoLinksReponse
    anyof_schema_15_validator: Optional[TornTerritoriesNoLinksReponse] = None
    # data type: TornItemModsResponse
    anyof_schema_16_validator: Optional[TornItemModsResponse] = None
    # data type: TornLookupResponse
    anyof_schema_17_validator: Optional[TornLookupResponse] = None
    # data type: TimestampResponse
    anyof_schema_18_validator: Optional[TimestampResponse] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[AttackLogResponse, TimestampResponse, TornBountiesResponse, TornCalendarResponse, TornCrimesResponse, TornEducationResponse, TornFactionHofResponse, TornFactionTreeResponse, TornHofResponse, TornItemAmmoResponse, TornItemModsResponse, TornItemsResponse, TornLogCategoriesResponse, TornLogTypesResponse, TornLookupResponse, TornSubcrimesResponse, TornTerritoriesNoLinksReponse, TornTerritoriesResponse]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: Set[str] = { "AttackLogResponse", "TimestampResponse", "TornBountiesResponse", "TornCalendarResponse", "TornCrimesResponse", "TornEducationResponse", "TornFactionHofResponse", "TornFactionTreeResponse", "TornHofResponse", "TornItemAmmoResponse", "TornItemModsResponse", "TornItemsResponse", "TornLogCategoriesResponse", "TornLogTypesResponse", "TornLookupResponse", "TornSubcrimesResponse", "TornTerritoriesNoLinksReponse", "TornTerritoriesResponse" }

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = TornGet200Response.model_construct()
        error_messages = []
        # validate data type: TornSubcrimesResponse
        if not isinstance(v, TornSubcrimesResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TornSubcrimesResponse`")
        else:
            return v

        # validate data type: TornCrimesResponse
        if not isinstance(v, TornCrimesResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TornCrimesResponse`")
        else:
            return v

        # validate data type: TornCalendarResponse
        if not isinstance(v, TornCalendarResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TornCalendarResponse`")
        else:
            return v

        # validate data type: TornHofResponse
        if not isinstance(v, TornHofResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TornHofResponse`")
        else:
            return v

        # validate data type: TornFactionHofResponse
        if not isinstance(v, TornFactionHofResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TornFactionHofResponse`")
        else:
            return v

        # validate data type: TornLogTypesResponse
        if not isinstance(v, TornLogTypesResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TornLogTypesResponse`")
        else:
            return v

        # validate data type: TornItemsResponse
        if not isinstance(v, TornItemsResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TornItemsResponse`")
        else:
            return v

        # validate data type: TornLogCategoriesResponse
        if not isinstance(v, TornLogCategoriesResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TornLogCategoriesResponse`")
        else:
            return v

        # validate data type: TornEducationResponse
        if not isinstance(v, TornEducationResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TornEducationResponse`")
        else:
            return v

        # validate data type: TornBountiesResponse
        if not isinstance(v, TornBountiesResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TornBountiesResponse`")
        else:
            return v

        # validate data type: TornItemAmmoResponse
        if not isinstance(v, TornItemAmmoResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TornItemAmmoResponse`")
        else:
            return v

        # validate data type: TornFactionTreeResponse
        if not isinstance(v, TornFactionTreeResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TornFactionTreeResponse`")
        else:
            return v

        # validate data type: AttackLogResponse
        if not isinstance(v, AttackLogResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AttackLogResponse`")
        else:
            return v

        # validate data type: TornTerritoriesResponse
        if not isinstance(v, TornTerritoriesResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TornTerritoriesResponse`")
        else:
            return v

        # validate data type: TornTerritoriesNoLinksReponse
        if not isinstance(v, TornTerritoriesNoLinksReponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TornTerritoriesNoLinksReponse`")
        else:
            return v

        # validate data type: TornItemModsResponse
        if not isinstance(v, TornItemModsResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TornItemModsResponse`")
        else:
            return v

        # validate data type: TornLookupResponse
        if not isinstance(v, TornLookupResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TornLookupResponse`")
        else:
            return v

        # validate data type: TimestampResponse
        if not isinstance(v, TimestampResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TimestampResponse`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in TornGet200Response with anyOf schemas: AttackLogResponse, TimestampResponse, TornBountiesResponse, TornCalendarResponse, TornCrimesResponse, TornEducationResponse, TornFactionHofResponse, TornFactionTreeResponse, TornHofResponse, TornItemAmmoResponse, TornItemModsResponse, TornItemsResponse, TornLogCategoriesResponse, TornLogTypesResponse, TornLookupResponse, TornSubcrimesResponse, TornTerritoriesNoLinksReponse, TornTerritoriesResponse. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[TornSubcrimesResponse] = None
        try:
            instance.actual_instance = TornSubcrimesResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[TornCrimesResponse] = None
        try:
            instance.actual_instance = TornCrimesResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[TornCalendarResponse] = None
        try:
            instance.actual_instance = TornCalendarResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[TornHofResponse] = None
        try:
            instance.actual_instance = TornHofResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[TornFactionHofResponse] = None
        try:
            instance.actual_instance = TornFactionHofResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_6_validator: Optional[TornLogTypesResponse] = None
        try:
            instance.actual_instance = TornLogTypesResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_7_validator: Optional[TornItemsResponse] = None
        try:
            instance.actual_instance = TornItemsResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_8_validator: Optional[TornLogCategoriesResponse] = None
        try:
            instance.actual_instance = TornLogCategoriesResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_9_validator: Optional[TornEducationResponse] = None
        try:
            instance.actual_instance = TornEducationResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_10_validator: Optional[TornBountiesResponse] = None
        try:
            instance.actual_instance = TornBountiesResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_11_validator: Optional[TornItemAmmoResponse] = None
        try:
            instance.actual_instance = TornItemAmmoResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_12_validator: Optional[TornFactionTreeResponse] = None
        try:
            instance.actual_instance = TornFactionTreeResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_13_validator: Optional[AttackLogResponse] = None
        try:
            instance.actual_instance = AttackLogResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_14_validator: Optional[TornTerritoriesResponse] = None
        try:
            instance.actual_instance = TornTerritoriesResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_15_validator: Optional[TornTerritoriesNoLinksReponse] = None
        try:
            instance.actual_instance = TornTerritoriesNoLinksReponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_16_validator: Optional[TornItemModsResponse] = None
        try:
            instance.actual_instance = TornItemModsResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_17_validator: Optional[TornLookupResponse] = None
        try:
            instance.actual_instance = TornLookupResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_18_validator: Optional[TimestampResponse] = None
        try:
            instance.actual_instance = TimestampResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into TornGet200Response with anyOf schemas: AttackLogResponse, TimestampResponse, TornBountiesResponse, TornCalendarResponse, TornCrimesResponse, TornEducationResponse, TornFactionHofResponse, TornFactionTreeResponse, TornHofResponse, TornItemAmmoResponse, TornItemModsResponse, TornItemsResponse, TornLogCategoriesResponse, TornLogTypesResponse, TornLookupResponse, TornSubcrimesResponse, TornTerritoriesNoLinksReponse, TornTerritoriesResponse. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AttackLogResponse, TimestampResponse, TornBountiesResponse, TornCalendarResponse, TornCrimesResponse, TornEducationResponse, TornFactionHofResponse, TornFactionTreeResponse, TornHofResponse, TornItemAmmoResponse, TornItemModsResponse, TornItemsResponse, TornLogCategoriesResponse, TornLogTypesResponse, TornLookupResponse, TornSubcrimesResponse, TornTerritoriesNoLinksReponse, TornTerritoriesResponse]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


