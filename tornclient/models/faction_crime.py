# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 1.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from tornclient.models.faction_crime_reward import FactionCrimeReward
from tornclient.models.faction_crime_slot import FactionCrimeSlot
from tornclient.models.faction_crime_status_enum import FactionCrimeStatusEnum
from typing import Optional, Set
from typing_extensions import Self

class FactionCrime(BaseModel):
    """
    FactionCrime
    """ # noqa: E501
    id: StrictInt
    previous_crime_id: StrictInt
    name: StrictStr
    difficulty: StrictInt
    status: FactionCrimeStatusEnum
    created_at: StrictInt = Field(description="The timestamp at which the crime was created.")
    planning_at: Optional[StrictInt]
    ready_at: Optional[StrictInt]
    expired_at: StrictInt = Field(description="The timestamp at which the crime will expire.")
    executed_at: Optional[StrictInt]
    slots: List[FactionCrimeSlot]
    rewards: Optional[FactionCrimeReward]
    __properties: ClassVar[List[str]] = ["id", "previous_crime_id", "name", "difficulty", "status", "created_at", "planning_at", "ready_at", "expired_at", "executed_at", "slots", "rewards"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FactionCrime from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in slots (list)
        _items = []
        if self.slots:
            for _item_slots in self.slots:
                if _item_slots:
                    _items.append(_item_slots.to_dict())
            _dict['slots'] = _items
        # override the default output from pydantic by calling `to_dict()` of rewards
        if self.rewards:
            _dict['rewards'] = self.rewards.to_dict()
        # set to None if planning_at (nullable) is None
        # and model_fields_set contains the field
        if self.planning_at is None and "planning_at" in self.model_fields_set:
            _dict['planning_at'] = None

        # set to None if ready_at (nullable) is None
        # and model_fields_set contains the field
        if self.ready_at is None and "ready_at" in self.model_fields_set:
            _dict['ready_at'] = None

        # set to None if executed_at (nullable) is None
        # and model_fields_set contains the field
        if self.executed_at is None and "executed_at" in self.model_fields_set:
            _dict['executed_at'] = None

        # set to None if rewards (nullable) is None
        # and model_fields_set contains the field
        if self.rewards is None and "rewards" in self.model_fields_set:
            _dict['rewards'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FactionCrime from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "previous_crime_id": obj.get("previous_crime_id"),
            "name": obj.get("name"),
            "difficulty": obj.get("difficulty"),
            "status": obj.get("status"),
            "created_at": obj.get("created_at"),
            "planning_at": obj.get("planning_at"),
            "ready_at": obj.get("ready_at"),
            "expired_at": obj.get("expired_at"),
            "executed_at": obj.get("executed_at"),
            "slots": [FactionCrimeSlot.from_dict(_item) for _item in obj["slots"]] if obj.get("slots") is not None else None,
            "rewards": FactionCrimeReward.from_dict(obj["rewards"]) if obj.get("rewards") is not None else None
        })
        return _obj


