# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 1.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Optional
from tornclient.models.faction_attacks_full_response import FactionAttacksFullResponse
from tornclient.models.faction_attacks_response import FactionAttacksResponse
from tornclient.models.revives_full_response import RevivesFullResponse
from tornclient.models.revives_response import RevivesResponse
from tornclient.models.timestamp_response import TimestampResponse
from tornclient.models.user_bounties_response import UserBountiesResponse
from tornclient.models.user_calendar_response import UserCalendarResponse
from tornclient.models.user_crimes_response import UserCrimesResponse
from tornclient.models.user_education_response import UserEducationResponse
from tornclient.models.user_enlisted_cars_response import UserEnlistedCarsResponse
from tornclient.models.user_faction_balance_response import UserFactionBalanceResponse
from tornclient.models.user_forum_feed_response import UserForumFeedResponse
from tornclient.models.user_forum_friends_response import UserForumFriendsResponse
from tornclient.models.user_forum_posts_response import UserForumPostsResponse
from tornclient.models.user_forum_subscribed_threads_response import UserForumSubscribedThreadsResponse
from tornclient.models.user_forum_threads_response import UserForumThreadsResponse
from tornclient.models.user_hof_response import UserHofResponse
from tornclient.models.user_item_market_response import UserItemMarketResponse
from tornclient.models.user_job_ranks_response import UserJobRanksResponse
from tornclient.models.user_list_response import UserListResponse
from tornclient.models.user_lookup_response import UserLookupResponse
from tornclient.models.user_organized_crime_response import UserOrganizedCrimeResponse
from tornclient.models.user_personal_stats_response import UserPersonalStatsResponse
from tornclient.models.user_races_response import UserRacesResponse
from typing import Union, Any, List, Set, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal, Self
from pydantic import Field

USERGET200RESPONSE_ANY_OF_SCHEMAS = ["FactionAttacksFullResponse", "FactionAttacksResponse", "RevivesFullResponse", "RevivesResponse", "TimestampResponse", "UserBountiesResponse", "UserCalendarResponse", "UserCrimesResponse", "UserEducationResponse", "UserEnlistedCarsResponse", "UserFactionBalanceResponse", "UserForumFeedResponse", "UserForumFriendsResponse", "UserForumPostsResponse", "UserForumSubscribedThreadsResponse", "UserForumThreadsResponse", "UserHofResponse", "UserItemMarketResponse", "UserJobRanksResponse", "UserListResponse", "UserLookupResponse", "UserOrganizedCrimeResponse", "UserPersonalStatsResponse", "UserRacesResponse"]

class UserGet200Response(BaseModel):
    """
    UserGet200Response
    """

    # data type: UserCrimesResponse
    anyof_schema_1_validator: Optional[UserCrimesResponse] = None
    # data type: UserRacesResponse
    anyof_schema_2_validator: Optional[UserRacesResponse] = None
    # data type: UserEnlistedCarsResponse
    anyof_schema_3_validator: Optional[UserEnlistedCarsResponse] = None
    # data type: UserForumPostsResponse
    anyof_schema_4_validator: Optional[UserForumPostsResponse] = None
    # data type: UserForumThreadsResponse
    anyof_schema_5_validator: Optional[UserForumThreadsResponse] = None
    # data type: UserForumSubscribedThreadsResponse
    anyof_schema_6_validator: Optional[UserForumSubscribedThreadsResponse] = None
    # data type: UserForumFeedResponse
    anyof_schema_7_validator: Optional[UserForumFeedResponse] = None
    # data type: UserForumFriendsResponse
    anyof_schema_8_validator: Optional[UserForumFriendsResponse] = None
    # data type: UserHofResponse
    anyof_schema_9_validator: Optional[UserHofResponse] = None
    # data type: UserCalendarResponse
    anyof_schema_10_validator: Optional[UserCalendarResponse] = None
    # data type: UserEducationResponse
    anyof_schema_11_validator: Optional[UserEducationResponse] = None
    # data type: UserBountiesResponse
    anyof_schema_12_validator: Optional[UserBountiesResponse] = None
    # data type: UserJobRanksResponse
    anyof_schema_13_validator: Optional[UserJobRanksResponse] = None
    # data type: UserFactionBalanceResponse
    anyof_schema_14_validator: Optional[UserFactionBalanceResponse] = None
    # data type: RevivesResponse
    anyof_schema_15_validator: Optional[RevivesResponse] = None
    # data type: RevivesFullResponse
    anyof_schema_16_validator: Optional[RevivesFullResponse] = None
    # data type: UserItemMarketResponse
    anyof_schema_17_validator: Optional[UserItemMarketResponse] = None
    # data type: UserListResponse
    anyof_schema_18_validator: Optional[UserListResponse] = None
    # data type: UserPersonalStatsResponse
    anyof_schema_19_validator: Optional[UserPersonalStatsResponse] = None
    # data type: UserOrganizedCrimeResponse
    anyof_schema_20_validator: Optional[UserOrganizedCrimeResponse] = None
    # data type: FactionAttacksResponse
    anyof_schema_21_validator: Optional[FactionAttacksResponse] = None
    # data type: FactionAttacksFullResponse
    anyof_schema_22_validator: Optional[FactionAttacksFullResponse] = None
    # data type: UserLookupResponse
    anyof_schema_23_validator: Optional[UserLookupResponse] = None
    # data type: TimestampResponse
    anyof_schema_24_validator: Optional[TimestampResponse] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[FactionAttacksFullResponse, FactionAttacksResponse, RevivesFullResponse, RevivesResponse, TimestampResponse, UserBountiesResponse, UserCalendarResponse, UserCrimesResponse, UserEducationResponse, UserEnlistedCarsResponse, UserFactionBalanceResponse, UserForumFeedResponse, UserForumFriendsResponse, UserForumPostsResponse, UserForumSubscribedThreadsResponse, UserForumThreadsResponse, UserHofResponse, UserItemMarketResponse, UserJobRanksResponse, UserListResponse, UserLookupResponse, UserOrganizedCrimeResponse, UserPersonalStatsResponse, UserRacesResponse]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: Set[str] = { "FactionAttacksFullResponse", "FactionAttacksResponse", "RevivesFullResponse", "RevivesResponse", "TimestampResponse", "UserBountiesResponse", "UserCalendarResponse", "UserCrimesResponse", "UserEducationResponse", "UserEnlistedCarsResponse", "UserFactionBalanceResponse", "UserForumFeedResponse", "UserForumFriendsResponse", "UserForumPostsResponse", "UserForumSubscribedThreadsResponse", "UserForumThreadsResponse", "UserHofResponse", "UserItemMarketResponse", "UserJobRanksResponse", "UserListResponse", "UserLookupResponse", "UserOrganizedCrimeResponse", "UserPersonalStatsResponse", "UserRacesResponse" }

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = UserGet200Response.model_construct()
        error_messages = []
        # validate data type: UserCrimesResponse
        if not isinstance(v, UserCrimesResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserCrimesResponse`")
        else:
            return v

        # validate data type: UserRacesResponse
        if not isinstance(v, UserRacesResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserRacesResponse`")
        else:
            return v

        # validate data type: UserEnlistedCarsResponse
        if not isinstance(v, UserEnlistedCarsResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserEnlistedCarsResponse`")
        else:
            return v

        # validate data type: UserForumPostsResponse
        if not isinstance(v, UserForumPostsResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserForumPostsResponse`")
        else:
            return v

        # validate data type: UserForumThreadsResponse
        if not isinstance(v, UserForumThreadsResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserForumThreadsResponse`")
        else:
            return v

        # validate data type: UserForumSubscribedThreadsResponse
        if not isinstance(v, UserForumSubscribedThreadsResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserForumSubscribedThreadsResponse`")
        else:
            return v

        # validate data type: UserForumFeedResponse
        if not isinstance(v, UserForumFeedResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserForumFeedResponse`")
        else:
            return v

        # validate data type: UserForumFriendsResponse
        if not isinstance(v, UserForumFriendsResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserForumFriendsResponse`")
        else:
            return v

        # validate data type: UserHofResponse
        if not isinstance(v, UserHofResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserHofResponse`")
        else:
            return v

        # validate data type: UserCalendarResponse
        if not isinstance(v, UserCalendarResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserCalendarResponse`")
        else:
            return v

        # validate data type: UserEducationResponse
        if not isinstance(v, UserEducationResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserEducationResponse`")
        else:
            return v

        # validate data type: UserBountiesResponse
        if not isinstance(v, UserBountiesResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserBountiesResponse`")
        else:
            return v

        # validate data type: UserJobRanksResponse
        if not isinstance(v, UserJobRanksResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserJobRanksResponse`")
        else:
            return v

        # validate data type: UserFactionBalanceResponse
        if not isinstance(v, UserFactionBalanceResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserFactionBalanceResponse`")
        else:
            return v

        # validate data type: RevivesResponse
        if not isinstance(v, RevivesResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RevivesResponse`")
        else:
            return v

        # validate data type: RevivesFullResponse
        if not isinstance(v, RevivesFullResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RevivesFullResponse`")
        else:
            return v

        # validate data type: UserItemMarketResponse
        if not isinstance(v, UserItemMarketResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserItemMarketResponse`")
        else:
            return v

        # validate data type: UserListResponse
        if not isinstance(v, UserListResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserListResponse`")
        else:
            return v

        # validate data type: UserPersonalStatsResponse
        if not isinstance(v, UserPersonalStatsResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserPersonalStatsResponse`")
        else:
            return v

        # validate data type: UserOrganizedCrimeResponse
        if not isinstance(v, UserOrganizedCrimeResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserOrganizedCrimeResponse`")
        else:
            return v

        # validate data type: FactionAttacksResponse
        if not isinstance(v, FactionAttacksResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FactionAttacksResponse`")
        else:
            return v

        # validate data type: FactionAttacksFullResponse
        if not isinstance(v, FactionAttacksFullResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FactionAttacksFullResponse`")
        else:
            return v

        # validate data type: UserLookupResponse
        if not isinstance(v, UserLookupResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserLookupResponse`")
        else:
            return v

        # validate data type: TimestampResponse
        if not isinstance(v, TimestampResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TimestampResponse`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in UserGet200Response with anyOf schemas: FactionAttacksFullResponse, FactionAttacksResponse, RevivesFullResponse, RevivesResponse, TimestampResponse, UserBountiesResponse, UserCalendarResponse, UserCrimesResponse, UserEducationResponse, UserEnlistedCarsResponse, UserFactionBalanceResponse, UserForumFeedResponse, UserForumFriendsResponse, UserForumPostsResponse, UserForumSubscribedThreadsResponse, UserForumThreadsResponse, UserHofResponse, UserItemMarketResponse, UserJobRanksResponse, UserListResponse, UserLookupResponse, UserOrganizedCrimeResponse, UserPersonalStatsResponse, UserRacesResponse. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[UserCrimesResponse] = None
        try:
            instance.actual_instance = UserCrimesResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[UserRacesResponse] = None
        try:
            instance.actual_instance = UserRacesResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[UserEnlistedCarsResponse] = None
        try:
            instance.actual_instance = UserEnlistedCarsResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[UserForumPostsResponse] = None
        try:
            instance.actual_instance = UserForumPostsResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[UserForumThreadsResponse] = None
        try:
            instance.actual_instance = UserForumThreadsResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_6_validator: Optional[UserForumSubscribedThreadsResponse] = None
        try:
            instance.actual_instance = UserForumSubscribedThreadsResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_7_validator: Optional[UserForumFeedResponse] = None
        try:
            instance.actual_instance = UserForumFeedResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_8_validator: Optional[UserForumFriendsResponse] = None
        try:
            instance.actual_instance = UserForumFriendsResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_9_validator: Optional[UserHofResponse] = None
        try:
            instance.actual_instance = UserHofResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_10_validator: Optional[UserCalendarResponse] = None
        try:
            instance.actual_instance = UserCalendarResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_11_validator: Optional[UserEducationResponse] = None
        try:
            instance.actual_instance = UserEducationResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_12_validator: Optional[UserBountiesResponse] = None
        try:
            instance.actual_instance = UserBountiesResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_13_validator: Optional[UserJobRanksResponse] = None
        try:
            instance.actual_instance = UserJobRanksResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_14_validator: Optional[UserFactionBalanceResponse] = None
        try:
            instance.actual_instance = UserFactionBalanceResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_15_validator: Optional[RevivesResponse] = None
        try:
            instance.actual_instance = RevivesResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_16_validator: Optional[RevivesFullResponse] = None
        try:
            instance.actual_instance = RevivesFullResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_17_validator: Optional[UserItemMarketResponse] = None
        try:
            instance.actual_instance = UserItemMarketResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_18_validator: Optional[UserListResponse] = None
        try:
            instance.actual_instance = UserListResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_19_validator: Optional[UserPersonalStatsResponse] = None
        try:
            instance.actual_instance = UserPersonalStatsResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_20_validator: Optional[UserOrganizedCrimeResponse] = None
        try:
            instance.actual_instance = UserOrganizedCrimeResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_21_validator: Optional[FactionAttacksResponse] = None
        try:
            instance.actual_instance = FactionAttacksResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_22_validator: Optional[FactionAttacksFullResponse] = None
        try:
            instance.actual_instance = FactionAttacksFullResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_23_validator: Optional[UserLookupResponse] = None
        try:
            instance.actual_instance = UserLookupResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_24_validator: Optional[TimestampResponse] = None
        try:
            instance.actual_instance = TimestampResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into UserGet200Response with anyOf schemas: FactionAttacksFullResponse, FactionAttacksResponse, RevivesFullResponse, RevivesResponse, TimestampResponse, UserBountiesResponse, UserCalendarResponse, UserCrimesResponse, UserEducationResponse, UserEnlistedCarsResponse, UserFactionBalanceResponse, UserForumFeedResponse, UserForumFriendsResponse, UserForumPostsResponse, UserForumSubscribedThreadsResponse, UserForumThreadsResponse, UserHofResponse, UserItemMarketResponse, UserJobRanksResponse, UserListResponse, UserLookupResponse, UserOrganizedCrimeResponse, UserPersonalStatsResponse, UserRacesResponse. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], FactionAttacksFullResponse, FactionAttacksResponse, RevivesFullResponse, RevivesResponse, TimestampResponse, UserBountiesResponse, UserCalendarResponse, UserCrimesResponse, UserEducationResponse, UserEnlistedCarsResponse, UserFactionBalanceResponse, UserForumFeedResponse, UserForumFriendsResponse, UserForumPostsResponse, UserForumSubscribedThreadsResponse, UserForumThreadsResponse, UserHofResponse, UserItemMarketResponse, UserJobRanksResponse, UserListResponse, UserLookupResponse, UserOrganizedCrimeResponse, UserPersonalStatsResponse, UserRacesResponse]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


