# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 1.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from tornclient.models.item_market_listing_item_bonus import ItemMarketListingItemBonus
from tornclient.models.item_market_listing_item_stats import ItemMarketListingItemStats
from typing import Optional, Set
from typing_extensions import Self

class UserItemMarkeListingItemDetails(BaseModel):
    """
    UserItemMarkeListingItemDetails
    """ # noqa: E501
    id: StrictInt
    name: StrictStr
    type: StrictStr
    rarity: Optional[StrictStr]
    uid: StrictInt
    stats: Optional[ItemMarketListingItemStats]
    bonuses: List[ItemMarketListingItemBonus]
    __properties: ClassVar[List[str]] = ["id", "name", "type", "rarity", "uid", "stats", "bonuses"]

    @field_validator('rarity')
    def rarity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['yellow', 'orange', 'red']):
            raise ValueError("must be one of enum values ('yellow', 'orange', 'red')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserItemMarkeListingItemDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of stats
        if self.stats:
            _dict['stats'] = self.stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in bonuses (list)
        _items = []
        if self.bonuses:
            for _item_bonuses in self.bonuses:
                if _item_bonuses:
                    _items.append(_item_bonuses.to_dict())
            _dict['bonuses'] = _items
        # set to None if rarity (nullable) is None
        # and model_fields_set contains the field
        if self.rarity is None and "rarity" in self.model_fields_set:
            _dict['rarity'] = None

        # set to None if stats (nullable) is None
        # and model_fields_set contains the field
        if self.stats is None and "stats" in self.model_fields_set:
            _dict['stats'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserItemMarkeListingItemDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "rarity": obj.get("rarity"),
            "uid": obj.get("uid"),
            "stats": ItemMarketListingItemStats.from_dict(obj["stats"]) if obj.get("stats") is not None else None,
            "bonuses": [ItemMarketListingItemBonus.from_dict(_item) for _item in obj["bonuses"]] if obj.get("bonuses") is not None else None
        })
        return _obj


