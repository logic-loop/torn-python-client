# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 1.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from tornclient.models.personal_stats_attacking_public_attacking_ammunition import PersonalStatsAttackingPublicAttackingAmmunition
from tornclient.models.personal_stats_attacking_public_attacking_attacks import PersonalStatsAttackingPublicAttackingAttacks
from tornclient.models.personal_stats_attacking_public_attacking_damage import PersonalStatsAttackingPublicAttackingDamage
from tornclient.models.personal_stats_attacking_public_attacking_defends import PersonalStatsAttackingPublicAttackingDefends
from tornclient.models.personal_stats_attacking_public_attacking_escapes import PersonalStatsAttackingPublicAttackingEscapes
from tornclient.models.personal_stats_attacking_public_attacking_faction import PersonalStatsAttackingPublicAttackingFaction
from tornclient.models.personal_stats_attacking_public_attacking_hits import PersonalStatsAttackingPublicAttackingHits
from tornclient.models.personal_stats_attacking_public_attacking_killstreak import PersonalStatsAttackingPublicAttackingKillstreak
from tornclient.models.personal_stats_attacking_public_attacking_networth import PersonalStatsAttackingPublicAttackingNetworth
from typing import Optional, Set
from typing_extensions import Self

class PersonalStatsAttackingPublicAttacking(BaseModel):
    """
    PersonalStatsAttackingPublicAttacking
    """ # noqa: E501
    attacks: PersonalStatsAttackingPublicAttackingAttacks
    defends: PersonalStatsAttackingPublicAttackingDefends
    elo: StrictInt
    unarmored_wins: StrictInt
    highest_level_beaten: StrictInt
    escapes: Optional[PersonalStatsAttackingPublicAttackingEscapes] = None
    killstreak: PersonalStatsAttackingPublicAttackingKillstreak
    hits: PersonalStatsAttackingPublicAttackingHits
    damage: PersonalStatsAttackingPublicAttackingDamage
    networth: PersonalStatsAttackingPublicAttackingNetworth
    ammunition: PersonalStatsAttackingPublicAttackingAmmunition
    faction: PersonalStatsAttackingPublicAttackingFaction
    __properties: ClassVar[List[str]] = ["attacks", "defends", "elo", "unarmored_wins", "highest_level_beaten", "escapes", "killstreak", "hits", "damage", "networth", "ammunition", "faction"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PersonalStatsAttackingPublicAttacking from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attacks
        if self.attacks:
            _dict['attacks'] = self.attacks.to_dict()
        # override the default output from pydantic by calling `to_dict()` of defends
        if self.defends:
            _dict['defends'] = self.defends.to_dict()
        # override the default output from pydantic by calling `to_dict()` of escapes
        if self.escapes:
            _dict['escapes'] = self.escapes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of killstreak
        if self.killstreak:
            _dict['killstreak'] = self.killstreak.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hits
        if self.hits:
            _dict['hits'] = self.hits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of damage
        if self.damage:
            _dict['damage'] = self.damage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of networth
        if self.networth:
            _dict['networth'] = self.networth.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ammunition
        if self.ammunition:
            _dict['ammunition'] = self.ammunition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of faction
        if self.faction:
            _dict['faction'] = self.faction.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PersonalStatsAttackingPublicAttacking from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attacks": PersonalStatsAttackingPublicAttackingAttacks.from_dict(obj["attacks"]) if obj.get("attacks") is not None else None,
            "defends": PersonalStatsAttackingPublicAttackingDefends.from_dict(obj["defends"]) if obj.get("defends") is not None else None,
            "elo": obj.get("elo"),
            "unarmored_wins": obj.get("unarmored_wins"),
            "highest_level_beaten": obj.get("highest_level_beaten"),
            "escapes": PersonalStatsAttackingPublicAttackingEscapes.from_dict(obj["escapes"]) if obj.get("escapes") is not None else None,
            "killstreak": PersonalStatsAttackingPublicAttackingKillstreak.from_dict(obj["killstreak"]) if obj.get("killstreak") is not None else None,
            "hits": PersonalStatsAttackingPublicAttackingHits.from_dict(obj["hits"]) if obj.get("hits") is not None else None,
            "damage": PersonalStatsAttackingPublicAttackingDamage.from_dict(obj["damage"]) if obj.get("damage") is not None else None,
            "networth": PersonalStatsAttackingPublicAttackingNetworth.from_dict(obj["networth"]) if obj.get("networth") is not None else None,
            "ammunition": PersonalStatsAttackingPublicAttackingAmmunition.from_dict(obj["ammunition"]) if obj.get("ammunition") is not None else None,
            "faction": PersonalStatsAttackingPublicAttackingFaction.from_dict(obj["faction"]) if obj.get("faction") is not None else None
        })
        return _obj


