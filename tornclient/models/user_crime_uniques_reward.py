# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 1.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from tornclient.models.user_crime_reward_item import UserCrimeRewardItem
from tornclient.models.user_crime_uniques_reward_ammo import UserCrimeUniquesRewardAmmo
from tornclient.models.user_crime_uniques_reward_money import UserCrimeUniquesRewardMoney
from typing import Optional, Set
from typing_extensions import Self

class UserCrimeUniquesReward(BaseModel):
    """
    UserCrimeUniquesReward
    """ # noqa: E501
    items: List[UserCrimeRewardItem]
    money: Optional[UserCrimeUniquesRewardMoney]
    ammo: Optional[UserCrimeUniquesRewardAmmo]
    __properties: ClassVar[List[str]] = ["items", "money", "ammo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserCrimeUniquesReward from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of money
        if self.money:
            _dict['money'] = self.money.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ammo
        if self.ammo:
            _dict['ammo'] = self.ammo.to_dict()
        # set to None if money (nullable) is None
        # and model_fields_set contains the field
        if self.money is None and "money" in self.model_fields_set:
            _dict['money'] = None

        # set to None if ammo (nullable) is None
        # and model_fields_set contains the field
        if self.ammo is None and "ammo" in self.model_fields_set:
            _dict['ammo'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserCrimeUniquesReward from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "items": [UserCrimeRewardItem.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "money": UserCrimeUniquesRewardMoney.from_dict(obj["money"]) if obj.get("money") is not None else None,
            "ammo": UserCrimeUniquesRewardAmmo.from_dict(obj["ammo"]) if obj.get("ammo") is not None else None
        })
        return _obj


