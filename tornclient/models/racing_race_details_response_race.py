# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 1.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from tornclient.models.race_participants import RaceParticipants
from tornclient.models.race_requirements import RaceRequirements
from tornclient.models.race_schedule import RaceSchedule
from tornclient.models.race_status_enum import RaceStatusEnum
from tornclient.models.racer_details import RacerDetails
from typing import Optional, Set
from typing_extensions import Self

class RacingRaceDetailsResponseRace(BaseModel):
    """
    RacingRaceDetailsResponseRace
    """ # noqa: E501
    id: StrictInt
    title: StrictStr
    track_id: StrictInt
    creator_id: StrictInt
    status: RaceStatusEnum
    laps: StrictInt
    participants: RaceParticipants
    schedule: RaceSchedule
    requirements: RaceRequirements
    results: List[RacerDetails]
    __properties: ClassVar[List[str]] = ["id", "title", "track_id", "creator_id", "status", "laps", "participants", "schedule", "requirements", "results"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RacingRaceDetailsResponseRace from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of participants
        if self.participants:
            _dict['participants'] = self.participants.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule
        if self.schedule:
            _dict['schedule'] = self.schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of requirements
        if self.requirements:
            _dict['requirements'] = self.requirements.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in results (list)
        _items = []
        if self.results:
            for _item_results in self.results:
                if _item_results:
                    _items.append(_item_results.to_dict())
            _dict['results'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RacingRaceDetailsResponseRace from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "title": obj.get("title"),
            "track_id": obj.get("track_id"),
            "creator_id": obj.get("creator_id"),
            "status": obj.get("status"),
            "laps": obj.get("laps"),
            "participants": RaceParticipants.from_dict(obj["participants"]) if obj.get("participants") is not None else None,
            "schedule": RaceSchedule.from_dict(obj["schedule"]) if obj.get("schedule") is not None else None,
            "requirements": RaceRequirements.from_dict(obj["requirements"]) if obj.get("requirements") is not None else None,
            "results": [RacerDetails.from_dict(_item) for _item in obj["results"]] if obj.get("results") is not None else None
        })
        return _obj


