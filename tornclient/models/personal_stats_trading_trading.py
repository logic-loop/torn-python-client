# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 1.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from tornclient.models.personal_stats_trading_trading_bazaar import PersonalStatsTradingTradingBazaar
from tornclient.models.personal_stats_trading_trading_item_market import PersonalStatsTradingTradingItemMarket
from tornclient.models.personal_stats_trading_trading_items import PersonalStatsTradingTradingItems
from tornclient.models.personal_stats_trading_trading_points import PersonalStatsTradingTradingPoints
from typing import Optional, Set
from typing_extensions import Self

class PersonalStatsTradingTrading(BaseModel):
    """
    PersonalStatsTradingTrading
    """ # noqa: E501
    items: PersonalStatsTradingTradingItems
    trades: StrictInt
    points: PersonalStatsTradingTradingPoints
    bazaar: PersonalStatsTradingTradingBazaar
    item_market: Optional[PersonalStatsTradingTradingItemMarket] = None
    __properties: ClassVar[List[str]] = ["items", "trades", "points", "bazaar", "item_market"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PersonalStatsTradingTrading from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of items
        if self.items:
            _dict['items'] = self.items.to_dict()
        # override the default output from pydantic by calling `to_dict()` of points
        if self.points:
            _dict['points'] = self.points.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bazaar
        if self.bazaar:
            _dict['bazaar'] = self.bazaar.to_dict()
        # override the default output from pydantic by calling `to_dict()` of item_market
        if self.item_market:
            _dict['item_market'] = self.item_market.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PersonalStatsTradingTrading from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "items": PersonalStatsTradingTradingItems.from_dict(obj["items"]) if obj.get("items") is not None else None,
            "trades": obj.get("trades"),
            "points": PersonalStatsTradingTradingPoints.from_dict(obj["points"]) if obj.get("points") is not None else None,
            "bazaar": PersonalStatsTradingTradingBazaar.from_dict(obj["bazaar"]) if obj.get("bazaar") is not None else None,
            "item_market": PersonalStatsTradingTradingItemMarket.from_dict(obj["item_market"]) if obj.get("item_market") is not None else None
        })
        return _obj


