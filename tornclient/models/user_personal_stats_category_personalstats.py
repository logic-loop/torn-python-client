# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 1.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from tornclient.models.personal_stats_attacking_public import PersonalStatsAttackingPublic
from tornclient.models.personal_stats_bounties import PersonalStatsBounties
from tornclient.models.personal_stats_communication import PersonalStatsCommunication
from tornclient.models.personal_stats_crimes import PersonalStatsCrimes
from tornclient.models.personal_stats_drugs import PersonalStatsDrugs
from tornclient.models.personal_stats_finishing_hits import PersonalStatsFinishingHits
from tornclient.models.personal_stats_hospital import PersonalStatsHospital
from tornclient.models.personal_stats_items import PersonalStatsItems
from tornclient.models.personal_stats_jail import PersonalStatsJail
from tornclient.models.personal_stats_jobs_public import PersonalStatsJobsPublic
from tornclient.models.personal_stats_missions import PersonalStatsMissions
from tornclient.models.personal_stats_networth_public import PersonalStatsNetworthPublic
from tornclient.models.personal_stats_other import PersonalStatsOther
from tornclient.models.personal_stats_racing import PersonalStatsRacing
from tornclient.models.personal_stats_trading import PersonalStatsTrading
from tornclient.models.personal_stats_travel import PersonalStatsTravel
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

USERPERSONALSTATSCATEGORYPERSONALSTATS_ONE_OF_SCHEMAS = ["PersonalStatsAttackingPublic", "PersonalStatsBounties", "PersonalStatsCommunication", "PersonalStatsCrimes", "PersonalStatsDrugs", "PersonalStatsFinishingHits", "PersonalStatsHospital", "PersonalStatsItems", "PersonalStatsJail", "PersonalStatsJobsPublic", "PersonalStatsMissions", "PersonalStatsNetworthPublic", "PersonalStatsOther", "PersonalStatsRacing", "PersonalStatsTrading", "PersonalStatsTravel"]

class UserPersonalStatsCategoryPersonalstats(BaseModel):
    """
    UserPersonalStatsCategoryPersonalstats
    """
    # data type: PersonalStatsAttackingPublic
    oneof_schema_1_validator: Optional[PersonalStatsAttackingPublic] = None
    # data type: PersonalStatsJobsPublic
    oneof_schema_2_validator: Optional[PersonalStatsJobsPublic] = None
    # data type: PersonalStatsTrading
    oneof_schema_3_validator: Optional[PersonalStatsTrading] = None
    # data type: PersonalStatsJail
    oneof_schema_4_validator: Optional[PersonalStatsJail] = None
    # data type: PersonalStatsHospital
    oneof_schema_5_validator: Optional[PersonalStatsHospital] = None
    # data type: PersonalStatsFinishingHits
    oneof_schema_6_validator: Optional[PersonalStatsFinishingHits] = None
    # data type: PersonalStatsCommunication
    oneof_schema_7_validator: Optional[PersonalStatsCommunication] = None
    # data type: PersonalStatsCrimes
    oneof_schema_8_validator: Optional[PersonalStatsCrimes] = None
    # data type: PersonalStatsBounties
    oneof_schema_9_validator: Optional[PersonalStatsBounties] = None
    # data type: PersonalStatsItems
    oneof_schema_10_validator: Optional[PersonalStatsItems] = None
    # data type: PersonalStatsTravel
    oneof_schema_11_validator: Optional[PersonalStatsTravel] = None
    # data type: PersonalStatsDrugs
    oneof_schema_12_validator: Optional[PersonalStatsDrugs] = None
    # data type: PersonalStatsMissions
    oneof_schema_13_validator: Optional[PersonalStatsMissions] = None
    # data type: PersonalStatsRacing
    oneof_schema_14_validator: Optional[PersonalStatsRacing] = None
    # data type: PersonalStatsNetworthPublic
    oneof_schema_15_validator: Optional[PersonalStatsNetworthPublic] = None
    # data type: PersonalStatsOther
    oneof_schema_16_validator: Optional[PersonalStatsOther] = None
    actual_instance: Optional[Union[PersonalStatsAttackingPublic, PersonalStatsBounties, PersonalStatsCommunication, PersonalStatsCrimes, PersonalStatsDrugs, PersonalStatsFinishingHits, PersonalStatsHospital, PersonalStatsItems, PersonalStatsJail, PersonalStatsJobsPublic, PersonalStatsMissions, PersonalStatsNetworthPublic, PersonalStatsOther, PersonalStatsRacing, PersonalStatsTrading, PersonalStatsTravel]] = None
    one_of_schemas: Set[str] = { "PersonalStatsAttackingPublic", "PersonalStatsBounties", "PersonalStatsCommunication", "PersonalStatsCrimes", "PersonalStatsDrugs", "PersonalStatsFinishingHits", "PersonalStatsHospital", "PersonalStatsItems", "PersonalStatsJail", "PersonalStatsJobsPublic", "PersonalStatsMissions", "PersonalStatsNetworthPublic", "PersonalStatsOther", "PersonalStatsRacing", "PersonalStatsTrading", "PersonalStatsTravel" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = UserPersonalStatsCategoryPersonalstats.model_construct()
        error_messages = []
        match = 0
        # validate data type: PersonalStatsAttackingPublic
        if not isinstance(v, PersonalStatsAttackingPublic):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PersonalStatsAttackingPublic`")
        else:
            match += 1
        # validate data type: PersonalStatsJobsPublic
        if not isinstance(v, PersonalStatsJobsPublic):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PersonalStatsJobsPublic`")
        else:
            match += 1
        # validate data type: PersonalStatsTrading
        if not isinstance(v, PersonalStatsTrading):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PersonalStatsTrading`")
        else:
            match += 1
        # validate data type: PersonalStatsJail
        if not isinstance(v, PersonalStatsJail):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PersonalStatsJail`")
        else:
            match += 1
        # validate data type: PersonalStatsHospital
        if not isinstance(v, PersonalStatsHospital):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PersonalStatsHospital`")
        else:
            match += 1
        # validate data type: PersonalStatsFinishingHits
        if not isinstance(v, PersonalStatsFinishingHits):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PersonalStatsFinishingHits`")
        else:
            match += 1
        # validate data type: PersonalStatsCommunication
        if not isinstance(v, PersonalStatsCommunication):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PersonalStatsCommunication`")
        else:
            match += 1
        # validate data type: PersonalStatsCrimes
        if not isinstance(v, PersonalStatsCrimes):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PersonalStatsCrimes`")
        else:
            match += 1
        # validate data type: PersonalStatsBounties
        if not isinstance(v, PersonalStatsBounties):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PersonalStatsBounties`")
        else:
            match += 1
        # validate data type: PersonalStatsItems
        if not isinstance(v, PersonalStatsItems):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PersonalStatsItems`")
        else:
            match += 1
        # validate data type: PersonalStatsTravel
        if not isinstance(v, PersonalStatsTravel):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PersonalStatsTravel`")
        else:
            match += 1
        # validate data type: PersonalStatsDrugs
        if not isinstance(v, PersonalStatsDrugs):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PersonalStatsDrugs`")
        else:
            match += 1
        # validate data type: PersonalStatsMissions
        if not isinstance(v, PersonalStatsMissions):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PersonalStatsMissions`")
        else:
            match += 1
        # validate data type: PersonalStatsRacing
        if not isinstance(v, PersonalStatsRacing):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PersonalStatsRacing`")
        else:
            match += 1
        # validate data type: PersonalStatsNetworthPublic
        if not isinstance(v, PersonalStatsNetworthPublic):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PersonalStatsNetworthPublic`")
        else:
            match += 1
        # validate data type: PersonalStatsOther
        if not isinstance(v, PersonalStatsOther):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PersonalStatsOther`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in UserPersonalStatsCategoryPersonalstats with oneOf schemas: PersonalStatsAttackingPublic, PersonalStatsBounties, PersonalStatsCommunication, PersonalStatsCrimes, PersonalStatsDrugs, PersonalStatsFinishingHits, PersonalStatsHospital, PersonalStatsItems, PersonalStatsJail, PersonalStatsJobsPublic, PersonalStatsMissions, PersonalStatsNetworthPublic, PersonalStatsOther, PersonalStatsRacing, PersonalStatsTrading, PersonalStatsTravel. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in UserPersonalStatsCategoryPersonalstats with oneOf schemas: PersonalStatsAttackingPublic, PersonalStatsBounties, PersonalStatsCommunication, PersonalStatsCrimes, PersonalStatsDrugs, PersonalStatsFinishingHits, PersonalStatsHospital, PersonalStatsItems, PersonalStatsJail, PersonalStatsJobsPublic, PersonalStatsMissions, PersonalStatsNetworthPublic, PersonalStatsOther, PersonalStatsRacing, PersonalStatsTrading, PersonalStatsTravel. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into PersonalStatsAttackingPublic
        try:
            instance.actual_instance = PersonalStatsAttackingPublic.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PersonalStatsJobsPublic
        try:
            instance.actual_instance = PersonalStatsJobsPublic.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PersonalStatsTrading
        try:
            instance.actual_instance = PersonalStatsTrading.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PersonalStatsJail
        try:
            instance.actual_instance = PersonalStatsJail.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PersonalStatsHospital
        try:
            instance.actual_instance = PersonalStatsHospital.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PersonalStatsFinishingHits
        try:
            instance.actual_instance = PersonalStatsFinishingHits.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PersonalStatsCommunication
        try:
            instance.actual_instance = PersonalStatsCommunication.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PersonalStatsCrimes
        try:
            instance.actual_instance = PersonalStatsCrimes.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PersonalStatsBounties
        try:
            instance.actual_instance = PersonalStatsBounties.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PersonalStatsItems
        try:
            instance.actual_instance = PersonalStatsItems.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PersonalStatsTravel
        try:
            instance.actual_instance = PersonalStatsTravel.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PersonalStatsDrugs
        try:
            instance.actual_instance = PersonalStatsDrugs.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PersonalStatsMissions
        try:
            instance.actual_instance = PersonalStatsMissions.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PersonalStatsRacing
        try:
            instance.actual_instance = PersonalStatsRacing.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PersonalStatsNetworthPublic
        try:
            instance.actual_instance = PersonalStatsNetworthPublic.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PersonalStatsOther
        try:
            instance.actual_instance = PersonalStatsOther.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into UserPersonalStatsCategoryPersonalstats with oneOf schemas: PersonalStatsAttackingPublic, PersonalStatsBounties, PersonalStatsCommunication, PersonalStatsCrimes, PersonalStatsDrugs, PersonalStatsFinishingHits, PersonalStatsHospital, PersonalStatsItems, PersonalStatsJail, PersonalStatsJobsPublic, PersonalStatsMissions, PersonalStatsNetworthPublic, PersonalStatsOther, PersonalStatsRacing, PersonalStatsTrading, PersonalStatsTravel. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into UserPersonalStatsCategoryPersonalstats with oneOf schemas: PersonalStatsAttackingPublic, PersonalStatsBounties, PersonalStatsCommunication, PersonalStatsCrimes, PersonalStatsDrugs, PersonalStatsFinishingHits, PersonalStatsHospital, PersonalStatsItems, PersonalStatsJail, PersonalStatsJobsPublic, PersonalStatsMissions, PersonalStatsNetworthPublic, PersonalStatsOther, PersonalStatsRacing, PersonalStatsTrading, PersonalStatsTravel. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], PersonalStatsAttackingPublic, PersonalStatsBounties, PersonalStatsCommunication, PersonalStatsCrimes, PersonalStatsDrugs, PersonalStatsFinishingHits, PersonalStatsHospital, PersonalStatsItems, PersonalStatsJail, PersonalStatsJobsPublic, PersonalStatsMissions, PersonalStatsNetworthPublic, PersonalStatsOther, PersonalStatsRacing, PersonalStatsTrading, PersonalStatsTravel]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


