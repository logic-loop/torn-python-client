# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 1.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from tornclient.models.faction_rank import FactionRank
from typing import Optional, Set
from typing_extensions import Self

class FactionBasic(BaseModel):
    """
    FactionBasic
    """ # noqa: E501
    id: StrictInt
    name: StrictStr
    tag: StrictStr
    tag_image: StrictStr
    leader_id: StrictInt
    co_leader_id: Optional[StrictInt] = Field(default=None, alias="co-leader_id")
    co_leader_id: StrictInt
    respect: StrictInt
    days_old: StrictInt
    capacity: StrictInt
    members: StrictInt
    is_enlisted: Optional[StrictBool]
    rank: FactionRank
    best_chain: StrictInt
    __properties: ClassVar[List[str]] = ["id", "name", "tag", "tag_image", "leader_id", "co-leader_id", "co_leader_id", "respect", "days_old", "capacity", "members", "is_enlisted", "rank", "best_chain"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FactionBasic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of rank
        if self.rank:
            _dict['rank'] = self.rank.to_dict()
        # set to None if is_enlisted (nullable) is None
        # and model_fields_set contains the field
        if self.is_enlisted is None and "is_enlisted" in self.model_fields_set:
            _dict['is_enlisted'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FactionBasic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "tag": obj.get("tag"),
            "tag_image": obj.get("tag_image"),
            "leader_id": obj.get("leader_id"),
            "co-leader_id": obj.get("co-leader_id"),
            "co_leader_id": obj.get("co_leader_id"),
            "respect": obj.get("respect"),
            "days_old": obj.get("days_old"),
            "capacity": obj.get("capacity"),
            "members": obj.get("members"),
            "is_enlisted": obj.get("is_enlisted"),
            "rank": FactionRank.from_dict(obj["rank"]) if obj.get("rank") is not None else None,
            "best_chain": obj.get("best_chain")
        })
        return _obj


