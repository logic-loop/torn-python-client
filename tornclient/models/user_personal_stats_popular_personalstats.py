# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 1.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List
from tornclient.models.personal_stats_attacking_popular_attacking import PersonalStatsAttackingPopularAttacking
from tornclient.models.personal_stats_crimes_popular_crimes import PersonalStatsCrimesPopularCrimes
from tornclient.models.personal_stats_drugs_drugs import PersonalStatsDrugsDrugs
from tornclient.models.personal_stats_hospital_popular_hospital import PersonalStatsHospitalPopularHospital
from tornclient.models.personal_stats_items_popular_items import PersonalStatsItemsPopularItems
from tornclient.models.personal_stats_jobs_public_jobs import PersonalStatsJobsPublicJobs
from tornclient.models.personal_stats_networth_public_networth import PersonalStatsNetworthPublicNetworth
from tornclient.models.personal_stats_other_popular_other import PersonalStatsOtherPopularOther
from tornclient.models.personal_stats_travel_popular_travel import PersonalStatsTravelPopularTravel
from typing import Optional, Set
from typing_extensions import Self

class UserPersonalStatsPopularPersonalstats(BaseModel):
    """
    UserPersonalStatsPopularPersonalstats
    """ # noqa: E501
    attacking: PersonalStatsAttackingPopularAttacking
    jobs: PersonalStatsJobsPublicJobs
    hospital: PersonalStatsHospitalPopularHospital
    crimes: PersonalStatsCrimesPopularCrimes
    items: PersonalStatsItemsPopularItems
    travel: PersonalStatsTravelPopularTravel
    drugs: PersonalStatsDrugsDrugs
    networth: PersonalStatsNetworthPublicNetworth
    other: PersonalStatsOtherPopularOther
    __properties: ClassVar[List[str]] = ["attacking", "jobs", "hospital", "crimes", "items", "travel", "drugs", "networth", "other"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserPersonalStatsPopularPersonalstats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attacking
        if self.attacking:
            _dict['attacking'] = self.attacking.to_dict()
        # override the default output from pydantic by calling `to_dict()` of jobs
        if self.jobs:
            _dict['jobs'] = self.jobs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hospital
        if self.hospital:
            _dict['hospital'] = self.hospital.to_dict()
        # override the default output from pydantic by calling `to_dict()` of crimes
        if self.crimes:
            _dict['crimes'] = self.crimes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of items
        if self.items:
            _dict['items'] = self.items.to_dict()
        # override the default output from pydantic by calling `to_dict()` of travel
        if self.travel:
            _dict['travel'] = self.travel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of drugs
        if self.drugs:
            _dict['drugs'] = self.drugs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of networth
        if self.networth:
            _dict['networth'] = self.networth.to_dict()
        # override the default output from pydantic by calling `to_dict()` of other
        if self.other:
            _dict['other'] = self.other.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserPersonalStatsPopularPersonalstats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attacking": PersonalStatsAttackingPopularAttacking.from_dict(obj["attacking"]) if obj.get("attacking") is not None else None,
            "jobs": PersonalStatsJobsPublicJobs.from_dict(obj["jobs"]) if obj.get("jobs") is not None else None,
            "hospital": PersonalStatsHospitalPopularHospital.from_dict(obj["hospital"]) if obj.get("hospital") is not None else None,
            "crimes": PersonalStatsCrimesPopularCrimes.from_dict(obj["crimes"]) if obj.get("crimes") is not None else None,
            "items": PersonalStatsItemsPopularItems.from_dict(obj["items"]) if obj.get("items") is not None else None,
            "travel": PersonalStatsTravelPopularTravel.from_dict(obj["travel"]) if obj.get("travel") is not None else None,
            "drugs": PersonalStatsDrugsDrugs.from_dict(obj["drugs"]) if obj.get("drugs") is not None else None,
            "networth": PersonalStatsNetworthPublicNetworth.from_dict(obj["networth"]) if obj.get("networth") is not None else None,
            "other": PersonalStatsOtherPopularOther.from_dict(obj["other"]) if obj.get("other") is not None else None
        })
        return _obj


