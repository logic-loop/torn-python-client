# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 1.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from tornclient.models.torn_items_response import TornItemsResponse

class TestTornItemsResponse(unittest.TestCase):
    """TornItemsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TornItemsResponse:
        """Test TornItemsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TornItemsResponse`
        """
        model = TornItemsResponse()
        if include_optional:
            return TornItemsResponse(
                items = [
                    tornclient.models.torn_item.TornItem(
                        id = 56, 
                        name = '', 
                        description = '', 
                        effect = '', 
                        requirement = '', 
                        image = '', 
                        type = 'Alcohol', 
                        sub_type = 'Heavy artillery', 
                        is_masked = True, 
                        is_tradable = True, 
                        is_found_in_city = True, 
                        value = tornclient.models.torn_item_value.TornItem_value(
                            vendor = tornclient.models.torn_item_value_vendor.TornItem_value_vendor(
                                country = '', 
                                name = '', ), 
                            buy_price = 56, 
                            sell_price = 56, 
                            market_price = 56, ), 
                        circulation = 56, 
                        details = null, )
                    ]
            )
        else:
            return TornItemsResponse(
                items = [
                    tornclient.models.torn_item.TornItem(
                        id = 56, 
                        name = '', 
                        description = '', 
                        effect = '', 
                        requirement = '', 
                        image = '', 
                        type = 'Alcohol', 
                        sub_type = 'Heavy artillery', 
                        is_masked = True, 
                        is_tradable = True, 
                        is_found_in_city = True, 
                        value = tornclient.models.torn_item_value.TornItem_value(
                            vendor = tornclient.models.torn_item_value_vendor.TornItem_value_vendor(
                                country = '', 
                                name = '', ), 
                            buy_price = 56, 
                            sell_price = 56, 
                            market_price = 56, ), 
                        circulation = 56, 
                        details = null, )
                    ],
        )
        """

    def testTornItemsResponse(self):
        """Test TornItemsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
