# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 1.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from tornclient.models.faction_wars import FactionWars

class TestFactionWars(unittest.TestCase):
    """FactionWars unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FactionWars:
        """Test FactionWars
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FactionWars`
        """
        model = FactionWars()
        if include_optional:
            return FactionWars(
                ranked = tornclient.models.faction_ranked_war.FactionRankedWar(
                    war_id = 56, 
                    start = 56, 
                    end = 56, 
                    target = 56, 
                    winner = 56, 
                    factions = [
                        tornclient.models.faction_ranked_war_participant.FactionRankedWarParticipant(
                            id = 56, 
                            name = '', 
                            score = 56, 
                            chain = 56, )
                        ], ),
                raids = [
                    tornclient.models.faction_raid_war.FactionRaidWar(
                        war_id = 56, 
                        start = 56, 
                        end = 56, 
                        factions = [
                            tornclient.models.faction_raid_war_participant.FactionRaidWarParticipant(
                                id = 56, 
                                name = '', 
                                score = 56, 
                                chain = 56, 
                                is_aggressor = True, )
                            ], )
                    ],
                territory = [
                    tornclient.models.faction_territory_war.FactionTerritoryWar(
                        war_id = 56, 
                        territory = '', 
                        start = 56, 
                        end = 56, 
                        target = 56, 
                        winner = 56, 
                        factions = [
                            tornclient.models.faction_territory_war_participant.FactionTerritoryWarParticipant(
                                id = 56, 
                                name = '', 
                                score = 56, 
                                chain = 56, 
                                is_aggressor = True, 
                                player_ids = [
                                    56
                                    ], )
                            ], )
                    ]
            )
        else:
            return FactionWars(
                ranked = tornclient.models.faction_ranked_war.FactionRankedWar(
                    war_id = 56, 
                    start = 56, 
                    end = 56, 
                    target = 56, 
                    winner = 56, 
                    factions = [
                        tornclient.models.faction_ranked_war_participant.FactionRankedWarParticipant(
                            id = 56, 
                            name = '', 
                            score = 56, 
                            chain = 56, )
                        ], ),
                raids = [
                    tornclient.models.faction_raid_war.FactionRaidWar(
                        war_id = 56, 
                        start = 56, 
                        end = 56, 
                        factions = [
                            tornclient.models.faction_raid_war_participant.FactionRaidWarParticipant(
                                id = 56, 
                                name = '', 
                                score = 56, 
                                chain = 56, 
                                is_aggressor = True, )
                            ], )
                    ],
                territory = [
                    tornclient.models.faction_territory_war.FactionTerritoryWar(
                        war_id = 56, 
                        territory = '', 
                        start = 56, 
                        end = 56, 
                        target = 56, 
                        winner = 56, 
                        factions = [
                            tornclient.models.faction_territory_war_participant.FactionTerritoryWarParticipant(
                                id = 56, 
                                name = '', 
                                score = 56, 
                                chain = 56, 
                                is_aggressor = True, 
                                player_ids = [
                                    56
                                    ], )
                            ], )
                    ],
        )
        """

    def testFactionWars(self):
        """Test FactionWars"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
