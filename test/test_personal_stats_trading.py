# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 1.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from tornclient.models.personal_stats_trading import PersonalStatsTrading

class TestPersonalStatsTrading(unittest.TestCase):
    """PersonalStatsTrading unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PersonalStatsTrading:
        """Test PersonalStatsTrading
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PersonalStatsTrading`
        """
        model = PersonalStatsTrading()
        if include_optional:
            return PersonalStatsTrading(
                trading = tornclient.models.personal_stats_trading_trading.PersonalStatsTrading_trading(
                    items = tornclient.models.personal_stats_trading_trading_items.PersonalStatsTrading_trading_items(
                        bought = tornclient.models.personal_stats_trading_trading_items_bought.PersonalStatsTrading_trading_items_bought(
                            market = 56, 
                            shops = 56, ), 
                        auctions = tornclient.models.personal_stats_trading_trading_items_auctions.PersonalStatsTrading_trading_items_auctions(
                            won = 56, 
                            sold = 56, ), 
                        sent = 56, ), 
                    trades = 56, 
                    points = tornclient.models.personal_stats_trading_trading_points.PersonalStatsTrading_trading_points(
                        bought = 56, 
                        sold = 56, ), 
                    bazaar = tornclient.models.personal_stats_trading_trading_bazaar.PersonalStatsTrading_trading_bazaar(
                        customers = 56, 
                        sales = 56, 
                        profit = 56, ), 
                    item_market = tornclient.models.personal_stats_trading_trading_item_market.PersonalStatsTrading_trading_item_market(
                        customers = 56, 
                        sales = 56, 
                        revenue = 56, 
                        fees = 56, ), )
            )
        else:
            return PersonalStatsTrading(
                trading = tornclient.models.personal_stats_trading_trading.PersonalStatsTrading_trading(
                    items = tornclient.models.personal_stats_trading_trading_items.PersonalStatsTrading_trading_items(
                        bought = tornclient.models.personal_stats_trading_trading_items_bought.PersonalStatsTrading_trading_items_bought(
                            market = 56, 
                            shops = 56, ), 
                        auctions = tornclient.models.personal_stats_trading_trading_items_auctions.PersonalStatsTrading_trading_items_auctions(
                            won = 56, 
                            sold = 56, ), 
                        sent = 56, ), 
                    trades = 56, 
                    points = tornclient.models.personal_stats_trading_trading_points.PersonalStatsTrading_trading_points(
                        bought = 56, 
                        sold = 56, ), 
                    bazaar = tornclient.models.personal_stats_trading_trading_bazaar.PersonalStatsTrading_trading_bazaar(
                        customers = 56, 
                        sales = 56, 
                        profit = 56, ), 
                    item_market = tornclient.models.personal_stats_trading_trading_item_market.PersonalStatsTrading_trading_item_market(
                        customers = 56, 
                        sales = 56, 
                        revenue = 56, 
                        fees = 56, ), ),
        )
        """

    def testPersonalStatsTrading(self):
        """Test PersonalStatsTrading"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
