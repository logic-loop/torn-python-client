# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 1.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from tornclient.models.user_crime_uniques_reward import UserCrimeUniquesReward

class TestUserCrimeUniquesReward(unittest.TestCase):
    """UserCrimeUniquesReward unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UserCrimeUniquesReward:
        """Test UserCrimeUniquesReward
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UserCrimeUniquesReward`
        """
        model = UserCrimeUniquesReward()
        if include_optional:
            return UserCrimeUniquesReward(
                items = [
                    tornclient.models.user_crime_reward_item.UserCrimeRewardItem(
                        id = 56, 
                        amount = 56, )
                    ],
                money = tornclient.models.user_crime_uniques_reward_money.UserCrimeUniquesRewardMoney(
                    min = 56, 
                    max = 56, ),
                ammo = tornclient.models.user_crime_uniques_reward_ammo.UserCrimeUniquesRewardAmmo(
                    amount = 56, 
                    type = 'standard', )
            )
        else:
            return UserCrimeUniquesReward(
                items = [
                    tornclient.models.user_crime_reward_item.UserCrimeRewardItem(
                        id = 56, 
                        amount = 56, )
                    ],
                money = tornclient.models.user_crime_uniques_reward_money.UserCrimeUniquesRewardMoney(
                    min = 56, 
                    max = 56, ),
                ammo = tornclient.models.user_crime_uniques_reward_ammo.UserCrimeUniquesRewardAmmo(
                    amount = 56, 
                    type = 'standard', ),
        )
        """

    def testUserCrimeUniquesReward(self):
        """Test UserCrimeUniquesReward"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
