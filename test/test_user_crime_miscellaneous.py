# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 1.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from tornclient.models.user_crime_miscellaneous import UserCrimeMiscellaneous

class TestUserCrimeMiscellaneous(unittest.TestCase):
    """UserCrimeMiscellaneous unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UserCrimeMiscellaneous:
        """Test UserCrimeMiscellaneous
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UserCrimeMiscellaneous`
        """
        model = UserCrimeMiscellaneous()
        if include_optional:
            return UserCrimeMiscellaneous(
                online_store = tornclient.models.user_crime_details_bootlegging_online_store.UserCrimeDetailsBootlegging_online_store(
                    earnings = 56, 
                    visits = 56, 
                    customers = 56, 
                    sales = 56, ),
                dvd_sales = tornclient.models.user_crime_details_bootlegging_dvd_sales.UserCrimeDetailsBootlegging_dvd_sales(
                    action = 56, 
                    comedy = 56, 
                    drama = 56, 
                    fantasy = 56, 
                    horror = 56, 
                    romance = 56, 
                    thriller = 56, 
                    sci_fi = 56, 
                    sci_fi = 56, 
                    total = 56, 
                    earnings = 56, ),
                dvds_copied = 56,
                cans_used = 56,
                most_graffiti_in_one_area = 56,
                most_graffiti_simultaneously = 56,
                graffiti_removed = 56,
                cost_to_city = 56,
                average_notoriety = 56,
                card_details = tornclient.models.user_crime_details_card_skimming_card_details.UserCrimeDetailsCardSkimming_card_details(
                    recoverable = 56, 
                    recovered = 56, 
                    sold = 56, 
                    lost = 56, 
                    areas = [
                        tornclient.models.user_crime_details_card_skimming_card_details_areas_inner.UserCrimeDetailsCardSkimming_card_details_areas_inner(
                            id = 56, 
                            amount = 56, )
                        ], ),
                skimmers = tornclient.models.user_crime_details_card_skimming_skimmers.UserCrimeDetailsCardSkimming_skimmers(
                    active = 56, 
                    most_lucrative = 56, 
                    oldest_recovered = 56, 
                    lost = 56, ),
                total_audience_gathered = 56,
                biggest_money_won = 56,
                shill_money_collected = 56,
                pickpocket_money_collected = 56,
                brute_force_cycles = 56,
                encryption_layers_broken = 56,
                highest_mips = 56,
                chars_guessed = 56,
                chars_guessed_total = 56,
                most_responses = 56,
                zones = tornclient.models.user_crime_details_scamming_zones.UserCrimeDetailsScamming_zones(
                    red = 56, 
                    neutral = 56, 
                    concern = 56, 
                    sensitivity = 56, 
                    temptation = 56, 
                    hesitation = 56, 
                    low_reward = 56, 
                    medium_reward = 56, 
                    high_reward = 56, ),
                concerns = tornclient.models.user_crime_details_scamming_concerns.UserCrimeDetailsScamming_concerns(
                    attempts = 56, 
                    resolved = 56, ),
                payouts = tornclient.models.user_crime_details_scamming_payouts.UserCrimeDetailsScamming_payouts(
                    low = 56, 
                    medium = 56, 
                    high = 56, ),
                emails = tornclient.models.user_crime_details_scamming_emails.UserCrimeDetailsScamming_emails(
                    scraper = 56, 
                    phisher = 56, )
            )
        else:
            return UserCrimeMiscellaneous(
                online_store = tornclient.models.user_crime_details_bootlegging_online_store.UserCrimeDetailsBootlegging_online_store(
                    earnings = 56, 
                    visits = 56, 
                    customers = 56, 
                    sales = 56, ),
                dvd_sales = tornclient.models.user_crime_details_bootlegging_dvd_sales.UserCrimeDetailsBootlegging_dvd_sales(
                    action = 56, 
                    comedy = 56, 
                    drama = 56, 
                    fantasy = 56, 
                    horror = 56, 
                    romance = 56, 
                    thriller = 56, 
                    sci_fi = 56, 
                    sci_fi = 56, 
                    total = 56, 
                    earnings = 56, ),
                cans_used = 56,
                most_graffiti_in_one_area = 56,
                most_graffiti_simultaneously = 56,
                graffiti_removed = 56,
                cost_to_city = 56,
                average_notoriety = 56,
                card_details = tornclient.models.user_crime_details_card_skimming_card_details.UserCrimeDetailsCardSkimming_card_details(
                    recoverable = 56, 
                    recovered = 56, 
                    sold = 56, 
                    lost = 56, 
                    areas = [
                        tornclient.models.user_crime_details_card_skimming_card_details_areas_inner.UserCrimeDetailsCardSkimming_card_details_areas_inner(
                            id = 56, 
                            amount = 56, )
                        ], ),
                skimmers = tornclient.models.user_crime_details_card_skimming_skimmers.UserCrimeDetailsCardSkimming_skimmers(
                    active = 56, 
                    most_lucrative = 56, 
                    oldest_recovered = 56, 
                    lost = 56, ),
                total_audience_gathered = 56,
                biggest_money_won = 56,
                shill_money_collected = 56,
                pickpocket_money_collected = 56,
                brute_force_cycles = 56,
                encryption_layers_broken = 56,
                highest_mips = 56,
                chars_guessed = 56,
                chars_guessed_total = 56,
                most_responses = 56,
                zones = tornclient.models.user_crime_details_scamming_zones.UserCrimeDetailsScamming_zones(
                    red = 56, 
                    neutral = 56, 
                    concern = 56, 
                    sensitivity = 56, 
                    temptation = 56, 
                    hesitation = 56, 
                    low_reward = 56, 
                    medium_reward = 56, 
                    high_reward = 56, ),
                concerns = tornclient.models.user_crime_details_scamming_concerns.UserCrimeDetailsScamming_concerns(
                    attempts = 56, 
                    resolved = 56, ),
                payouts = tornclient.models.user_crime_details_scamming_payouts.UserCrimeDetailsScamming_payouts(
                    low = 56, 
                    medium = 56, 
                    high = 56, ),
                emails = tornclient.models.user_crime_details_scamming_emails.UserCrimeDetailsScamming_emails(
                    scraper = 56, 
                    phisher = 56, ),
        )
        """

    def testUserCrimeMiscellaneous(self):
        """Test UserCrimeMiscellaneous"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
