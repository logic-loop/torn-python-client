# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 1.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from tornclient.models.faction_crime_response import FactionCrimeResponse

class TestFactionCrimeResponse(unittest.TestCase):
    """FactionCrimeResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FactionCrimeResponse:
        """Test FactionCrimeResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FactionCrimeResponse`
        """
        model = FactionCrimeResponse()
        if include_optional:
            return FactionCrimeResponse(
                crime = tornclient.models.faction_crime.FactionCrime(
                    id = 56, 
                    previous_crime_id = 56, 
                    name = '', 
                    difficulty = 56, 
                    status = 'Recruiting', 
                    created_at = 56, 
                    planning_at = 56, 
                    ready_at = 56, 
                    expired_at = 56, 
                    executed_at = 56, 
                    slots = [
                        tornclient.models.faction_crime_slot.FactionCrimeSlot(
                            position = '', 
                            item_requirement = tornclient.models.faction_crime_slot_item_requirement.FactionCrimeSlot_item_requirement(
                                id = 56, 
                                is_reusable = True, 
                                is_available = True, ), 
                            user_id = 56, 
                            user = tornclient.models.faction_crime_user.FactionCrimeUser(
                                id = 56, 
                                outcome = 'Successful', 
                                joined_at = 56, 
                                progress = 1.337, ), 
                            success_chance = 56, 
                            crime_pass_rate = 56, 
                            checkpoint_pass_rate = 56, )
                        ], 
                    rewards = tornclient.models.faction_crime_reward.FactionCrimeReward(
                        money = 56, 
                        items = [
                            tornclient.models.faction_crime_reward_item.FactionCrimeRewardItem(
                                id = 56, 
                                quantity = 56, )
                            ], 
                        respect = 56, 
                        scope = 56, 
                        payout = tornclient.models.faction_crime_reward_payout.FactionCrimeRewardPayout(
                            type = 'balance', 
                            percentage = 56, 
                            paid_by = 56, 
                            paid_at = 56, ), ), )
            )
        else:
            return FactionCrimeResponse(
                crime = tornclient.models.faction_crime.FactionCrime(
                    id = 56, 
                    previous_crime_id = 56, 
                    name = '', 
                    difficulty = 56, 
                    status = 'Recruiting', 
                    created_at = 56, 
                    planning_at = 56, 
                    ready_at = 56, 
                    expired_at = 56, 
                    executed_at = 56, 
                    slots = [
                        tornclient.models.faction_crime_slot.FactionCrimeSlot(
                            position = '', 
                            item_requirement = tornclient.models.faction_crime_slot_item_requirement.FactionCrimeSlot_item_requirement(
                                id = 56, 
                                is_reusable = True, 
                                is_available = True, ), 
                            user_id = 56, 
                            user = tornclient.models.faction_crime_user.FactionCrimeUser(
                                id = 56, 
                                outcome = 'Successful', 
                                joined_at = 56, 
                                progress = 1.337, ), 
                            success_chance = 56, 
                            crime_pass_rate = 56, 
                            checkpoint_pass_rate = 56, )
                        ], 
                    rewards = tornclient.models.faction_crime_reward.FactionCrimeReward(
                        money = 56, 
                        items = [
                            tornclient.models.faction_crime_reward_item.FactionCrimeRewardItem(
                                id = 56, 
                                quantity = 56, )
                            ], 
                        respect = 56, 
                        scope = 56, 
                        payout = tornclient.models.faction_crime_reward_payout.FactionCrimeRewardPayout(
                            type = 'balance', 
                            percentage = 56, 
                            paid_by = 56, 
                            paid_at = 56, ), ), ),
        )
        """

    def testFactionCrimeResponse(self):
        """Test FactionCrimeResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
