# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 1.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from tornclient.models.faction_chain_report import FactionChainReport

class TestFactionChainReport(unittest.TestCase):
    """FactionChainReport unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FactionChainReport:
        """Test FactionChainReport
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FactionChainReport`
        """
        model = FactionChainReport()
        if include_optional:
            return FactionChainReport(
                id = 56,
                faction_id = 56,
                start = 56,
                end = 56,
                details = tornclient.models.faction_chain_report_details.FactionChainReportDetails(
                    chain = 56, 
                    respect = 1.337, 
                    members = 56, 
                    targets = 56, 
                    war = 56, 
                    best = 1.337, 
                    leave = 56, 
                    mug = 56, 
                    hospitalize = 56, 
                    assists = 56, 
                    retaliations = 56, 
                    overseas = 56, 
                    draws = 56, 
                    escapes = 56, 
                    losses = 56, ),
                bonuses = [
                    tornclient.models.faction_chain_report_bonus.FactionChainReportBonus(
                        attacker_id = 56, 
                        defender_id = 56, 
                        chain = 56, 
                        respect = 56, )
                    ],
                attackers = [
                    tornclient.models.faction_chain_report_attacker.FactionChainReportAttacker(
                        id = 56, 
                        respect = tornclient.models.faction_chain_report_attacker_respect.FactionChainReportAttackerRespect(
                            total = 1.337, 
                            average = 1.337, 
                            best = 1.337, ), 
                        attacks = tornclient.models.faction_chain_report_attacker_attacks.FactionChainReportAttackerAttacks(
                            total = 56, 
                            leave = 56, 
                            mug = 56, 
                            hospitalize = 56, 
                            assists = 56, 
                            retaliations = 56, 
                            overseas = 56, 
                            draws = 56, 
                            escapes = 56, 
                            losses = 56, 
                            war = 56, 
                            bonuses = 56, ), )
                    ],
                non_attackers = [
                    56
                    ],
                non_attackers = [
                    56
                    ]
            )
        else:
            return FactionChainReport(
                id = 56,
                faction_id = 56,
                start = 56,
                end = 56,
                details = tornclient.models.faction_chain_report_details.FactionChainReportDetails(
                    chain = 56, 
                    respect = 1.337, 
                    members = 56, 
                    targets = 56, 
                    war = 56, 
                    best = 1.337, 
                    leave = 56, 
                    mug = 56, 
                    hospitalize = 56, 
                    assists = 56, 
                    retaliations = 56, 
                    overseas = 56, 
                    draws = 56, 
                    escapes = 56, 
                    losses = 56, ),
                bonuses = [
                    tornclient.models.faction_chain_report_bonus.FactionChainReportBonus(
                        attacker_id = 56, 
                        defender_id = 56, 
                        chain = 56, 
                        respect = 56, )
                    ],
                attackers = [
                    tornclient.models.faction_chain_report_attacker.FactionChainReportAttacker(
                        id = 56, 
                        respect = tornclient.models.faction_chain_report_attacker_respect.FactionChainReportAttackerRespect(
                            total = 1.337, 
                            average = 1.337, 
                            best = 1.337, ), 
                        attacks = tornclient.models.faction_chain_report_attacker_attacks.FactionChainReportAttackerAttacks(
                            total = 56, 
                            leave = 56, 
                            mug = 56, 
                            hospitalize = 56, 
                            assists = 56, 
                            retaliations = 56, 
                            overseas = 56, 
                            draws = 56, 
                            escapes = 56, 
                            losses = 56, 
                            war = 56, 
                            bonuses = 56, ), )
                    ],
                non_attackers = [
                    56
                    ],
        )
        """

    def testFactionChainReport(self):
        """Test FactionChainReport"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
