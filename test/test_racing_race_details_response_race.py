# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 1.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from tornclient.models.racing_race_details_response_race import RacingRaceDetailsResponseRace

class TestRacingRaceDetailsResponseRace(unittest.TestCase):
    """RacingRaceDetailsResponseRace unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RacingRaceDetailsResponseRace:
        """Test RacingRaceDetailsResponseRace
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RacingRaceDetailsResponseRace`
        """
        model = RacingRaceDetailsResponseRace()
        if include_optional:
            return RacingRaceDetailsResponseRace(
                id = 56,
                title = '',
                track_id = 56,
                creator_id = 56,
                status = 'open',
                laps = 56,
                participants = tornclient.models.race_participants.Race_participants(
                    minimum = 56, 
                    maximum = 56, 
                    current = 56, ),
                schedule = tornclient.models.race_schedule.Race_schedule(
                    join_from = 56, 
                    join_until = 56, 
                    start = 56, 
                    end = 56, ),
                requirements = tornclient.models.race_requirements.Race_requirements(
                    car_class = 'A', 
                    driver_class = 'A', 
                    car_item_id = 56, 
                    requires_stock_car = True, 
                    requires_password = True, 
                    join_fee = 56, ),
                results = [
                    tornclient.models.racer_details.RacerDetails(
                        driver_id = 56, 
                        position = 56, 
                        car_id = 56, 
                        car_item_id = 56, 
                        car_item_name = '', 
                        car_class = 'A', 
                        has_crashed = True, 
                        best_lap_time = 1.337, 
                        race_time = 1.337, 
                        time_ended = 56, )
                    ]
            )
        else:
            return RacingRaceDetailsResponseRace(
                id = 56,
                title = '',
                track_id = 56,
                creator_id = 56,
                status = 'open',
                laps = 56,
                participants = tornclient.models.race_participants.Race_participants(
                    minimum = 56, 
                    maximum = 56, 
                    current = 56, ),
                schedule = tornclient.models.race_schedule.Race_schedule(
                    join_from = 56, 
                    join_until = 56, 
                    start = 56, 
                    end = 56, ),
                requirements = tornclient.models.race_requirements.Race_requirements(
                    car_class = 'A', 
                    driver_class = 'A', 
                    car_item_id = 56, 
                    requires_stock_car = True, 
                    requires_password = True, 
                    join_fee = 56, ),
                results = [
                    tornclient.models.racer_details.RacerDetails(
                        driver_id = 56, 
                        position = 56, 
                        car_id = 56, 
                        car_item_id = 56, 
                        car_item_name = '', 
                        car_class = 'A', 
                        has_crashed = True, 
                        best_lap_time = 1.337, 
                        race_time = 1.337, 
                        time_ended = 56, )
                    ],
        )
        """

    def testRacingRaceDetailsResponseRace(self):
        """Test RacingRaceDetailsResponseRace"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
