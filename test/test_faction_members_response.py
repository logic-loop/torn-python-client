# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 1.5.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from tornclient.models.faction_members_response import FactionMembersResponse

class TestFactionMembersResponse(unittest.TestCase):
    """FactionMembersResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FactionMembersResponse:
        """Test FactionMembersResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FactionMembersResponse`
        """
        model = FactionMembersResponse()
        if include_optional:
            return FactionMembersResponse(
                members = [
                    tornclient.models.faction_member.FactionMember(
                        id = 56, 
                        name = '', 
                        position = '', 
                        level = 56, 
                        days_in_faction = 56, 
                        is_revivable = True, 
                        is_on_wall = True, 
                        is_in_oc = True, 
                        has_early_discharge = True, 
                        last_action = tornclient.models.user_last_action.UserLastAction(
                            status = '', 
                            timestamp = 56, 
                            relative = '', ), 
                        status = tornclient.models.user_status.UserStatus(
                            description = '', 
                            details = '', 
                            state = '', 
                            until = 56, ), 
                        life = tornclient.models.user_life.UserLife(
                            current = 56, 
                            maximum = 56, ), 
                        revive_setting = 'Everyone', )
                    ]
            )
        else:
            return FactionMembersResponse(
                members = [
                    tornclient.models.faction_member.FactionMember(
                        id = 56, 
                        name = '', 
                        position = '', 
                        level = 56, 
                        days_in_faction = 56, 
                        is_revivable = True, 
                        is_on_wall = True, 
                        is_in_oc = True, 
                        has_early_discharge = True, 
                        last_action = tornclient.models.user_last_action.UserLastAction(
                            status = '', 
                            timestamp = 56, 
                            relative = '', ), 
                        status = tornclient.models.user_status.UserStatus(
                            description = '', 
                            details = '', 
                            state = '', 
                            until = 56, ), 
                        life = tornclient.models.user_life.UserLife(
                            current = 56, 
                            maximum = 56, ), 
                        revive_setting = 'Everyone', )
                    ],
        )
        """

    def testFactionMembersResponse(self):
        """Test FactionMembersResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
